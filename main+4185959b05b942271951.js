!function(Q){function C(F){if(I[F])return I[F].exports;var l=I[F]={i:F,l:!1,exports:{}};return Q[F].call(l.exports,l,l.exports,C),l.l=!0,l.exports}var I={};C.m=Q,C.c=I,C.i=function(Q){return Q},C.d=function(Q,I,F){C.o(Q,I)||Object.defineProperty(Q,I,{configurable:!1,enumerable:!0,get:F})},C.n=function(Q){var I=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return C.d(I,"a",I),I},C.o=function(Q,C){return Object.prototype.hasOwnProperty.call(Q,C)},C.p="",C(C.s=5)}([function(module,exports,__webpack_require__){eval('var map = {\n\t"./21771892.xml": 6\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error("Cannot find module \'" + req + "\'.");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 0;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvZGFubXUgbm9ucmVjdXJzaXZlIF5bXFxzXFxTXSskP2IwM2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vMjE3NzE4OTIueG1sXCI6IDZcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAwO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2Rhbm11IG5vbnJlY3Vyc2l2ZSBeW1xcc1xcU10rJFxuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){eval('var map = {\n\t"./browserfullscreen_off_button.png": 7,\n\t"./browserfullscreen_on_button.png": 8,\n\t"./controlsBarUnloaded.png": 9,\n\t"./controls_playbutton.jpg": 10,\n\t"./controls_volumebutton.jpg": 11,\n\t"./controls_volumebutton_offf.jpg": 12,\n\t"./danmu_clean_fixedbottom_off.png": 13,\n\t"./danmu_clean_fixedbottom_off_hover.png": 14,\n\t"./danmu_clean_fixedbottom_on.png": 15,\n\t"./danmu_clean_fixedbottom_on_hover.png": 16,\n\t"./danmu_clean_fixedtop_off.png": 17,\n\t"./danmu_clean_fixedtop_off_hover.png": 18,\n\t"./danmu_clean_fixedtop_on.png": 19,\n\t"./danmu_clean_fixedtop_on_hover.png": 20,\n\t"./danmu_clean_movepos_off.png": 21,\n\t"./danmu_clean_movepos_off_hover.png": 22,\n\t"./danmu_clean_movepos_on.png": 23,\n\t"./danmu_clean_movepos_on_hover.png": 24,\n\t"./danmu_off_button.png": 25,\n\t"./danmu_off_button_hover.png": 26,\n\t"./danmu_on_button.png": 27,\n\t"./danmu_on_button_hover.png": 28,\n\t"./home_page_logo.png": 29,\n\t"./mutebutton.png": 30,\n\t"./mutebutton_hover.png": 31,\n\t"./pausebutton.png": 32,\n\t"./pausebutton_hover.png": 33,\n\t"./playbutton.png": 34,\n\t"./playbutton_hover.png": 35,\n\t"./readyStateLogo.gif": 36,\n\t"./repeat_off_button.png": 37,\n\t"./repeat_off_button_hover.png": 38,\n\t"./repeat_on_button.png": 39,\n\t"./repeat_on_button_hover.png": 40,\n\t"./sendbar_choose_button.png": 41,\n\t"./sendbar_choose_button_hover.png": 42,\n\t"./sendbar_color_button.png": 43,\n\t"./sendbar_color_button_hover.png": 44,\n\t"./sendbar_fixedbottom_mode_off.png": 45,\n\t"./sendbar_fixedbottom_mode_off_hover.png": 46,\n\t"./sendbar_fixedbottom_mode_on.png": 47,\n\t"./sendbar_fixedbottom_mode_on_hover.png": 48,\n\t"./sendbar_fixedtop_mode_off.png": 49,\n\t"./sendbar_fixedtop_mode_off_hover.png": 50,\n\t"./sendbar_fixedtop_mode_on.png": 51,\n\t"./sendbar_fixedtop_mode_on_hover.png": 52,\n\t"./sendbar_movepos_mode_off.png": 53,\n\t"./sendbar_movepos_mode_off_hover.png": 54,\n\t"./sendbar_movepos_mode_on.png": 55,\n\t"./sendbar_movepos_mode_on_hover.png": 56,\n\t"./serchbackgroundimage.png": 57,\n\t"./state_button.png": 58,\n\t"./state_button0.png": 59,\n\t"./videoPageUnloaded.png": 60,\n\t"./volume_div_max.png": 61,\n\t"./volume_div_min.png": 62,\n\t"./volume_div_off.png": 63,\n\t"./volumebutton.png": 64,\n\t"./volumebutton_hover.png": 65,\n\t"./volumelowbutton.png": 66,\n\t"./volumelowbutton_hover.png": 67,\n\t"./webfullscreen_off_button.png": 68,\n\t"./webfullscreen_off_button_hover.png": 69,\n\t"./webfullscreen_on_button.png": 70,\n\t"./widescreen_off_button.png": 71,\n\t"./widescreen_off_button_hover.png": 72,\n\t"./widescreen_on_button.png": 73,\n\t"./widescreen_on_button_hover.png": 74\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error("Cannot find module \'" + req + "\'.");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzIG5vbnJlY3Vyc2l2ZSBeW1xcc1xcU10rJD8zYjk1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vYnJvd3NlcmZ1bGxzY3JlZW5fb2ZmX2J1dHRvbi5wbmdcIjogNyxcblx0XCIuL2Jyb3dzZXJmdWxsc2NyZWVuX29uX2J1dHRvbi5wbmdcIjogOCxcblx0XCIuL2NvbnRyb2xzQmFyVW5sb2FkZWQucG5nXCI6IDksXG5cdFwiLi9jb250cm9sc19wbGF5YnV0dG9uLmpwZ1wiOiAxMCxcblx0XCIuL2NvbnRyb2xzX3ZvbHVtZWJ1dHRvbi5qcGdcIjogMTEsXG5cdFwiLi9jb250cm9sc192b2x1bWVidXR0b25fb2ZmZi5qcGdcIjogMTIsXG5cdFwiLi9kYW5tdV9jbGVhbl9maXhlZGJvdHRvbV9vZmYucG5nXCI6IDEzLFxuXHRcIi4vZGFubXVfY2xlYW5fZml4ZWRib3R0b21fb2ZmX2hvdmVyLnBuZ1wiOiAxNCxcblx0XCIuL2Rhbm11X2NsZWFuX2ZpeGVkYm90dG9tX29uLnBuZ1wiOiAxNSxcblx0XCIuL2Rhbm11X2NsZWFuX2ZpeGVkYm90dG9tX29uX2hvdmVyLnBuZ1wiOiAxNixcblx0XCIuL2Rhbm11X2NsZWFuX2ZpeGVkdG9wX29mZi5wbmdcIjogMTcsXG5cdFwiLi9kYW5tdV9jbGVhbl9maXhlZHRvcF9vZmZfaG92ZXIucG5nXCI6IDE4LFxuXHRcIi4vZGFubXVfY2xlYW5fZml4ZWR0b3Bfb24ucG5nXCI6IDE5LFxuXHRcIi4vZGFubXVfY2xlYW5fZml4ZWR0b3Bfb25faG92ZXIucG5nXCI6IDIwLFxuXHRcIi4vZGFubXVfY2xlYW5fbW92ZXBvc19vZmYucG5nXCI6IDIxLFxuXHRcIi4vZGFubXVfY2xlYW5fbW92ZXBvc19vZmZfaG92ZXIucG5nXCI6IDIyLFxuXHRcIi4vZGFubXVfY2xlYW5fbW92ZXBvc19vbi5wbmdcIjogMjMsXG5cdFwiLi9kYW5tdV9jbGVhbl9tb3ZlcG9zX29uX2hvdmVyLnBuZ1wiOiAyNCxcblx0XCIuL2Rhbm11X29mZl9idXR0b24ucG5nXCI6IDI1LFxuXHRcIi4vZGFubXVfb2ZmX2J1dHRvbl9ob3Zlci5wbmdcIjogMjYsXG5cdFwiLi9kYW5tdV9vbl9idXR0b24ucG5nXCI6IDI3LFxuXHRcIi4vZGFubXVfb25fYnV0dG9uX2hvdmVyLnBuZ1wiOiAyOCxcblx0XCIuL2hvbWVfcGFnZV9sb2dvLnBuZ1wiOiAyOSxcblx0XCIuL211dGVidXR0b24ucG5nXCI6IDMwLFxuXHRcIi4vbXV0ZWJ1dHRvbl9ob3Zlci5wbmdcIjogMzEsXG5cdFwiLi9wYXVzZWJ1dHRvbi5wbmdcIjogMzIsXG5cdFwiLi9wYXVzZWJ1dHRvbl9ob3Zlci5wbmdcIjogMzMsXG5cdFwiLi9wbGF5YnV0dG9uLnBuZ1wiOiAzNCxcblx0XCIuL3BsYXlidXR0b25faG92ZXIucG5nXCI6IDM1LFxuXHRcIi4vcmVhZHlTdGF0ZUxvZ28uZ2lmXCI6IDM2LFxuXHRcIi4vcmVwZWF0X29mZl9idXR0b24ucG5nXCI6IDM3LFxuXHRcIi4vcmVwZWF0X29mZl9idXR0b25faG92ZXIucG5nXCI6IDM4LFxuXHRcIi4vcmVwZWF0X29uX2J1dHRvbi5wbmdcIjogMzksXG5cdFwiLi9yZXBlYXRfb25fYnV0dG9uX2hvdmVyLnBuZ1wiOiA0MCxcblx0XCIuL3NlbmRiYXJfY2hvb3NlX2J1dHRvbi5wbmdcIjogNDEsXG5cdFwiLi9zZW5kYmFyX2Nob29zZV9idXR0b25faG92ZXIucG5nXCI6IDQyLFxuXHRcIi4vc2VuZGJhcl9jb2xvcl9idXR0b24ucG5nXCI6IDQzLFxuXHRcIi4vc2VuZGJhcl9jb2xvcl9idXR0b25faG92ZXIucG5nXCI6IDQ0LFxuXHRcIi4vc2VuZGJhcl9maXhlZGJvdHRvbV9tb2RlX29mZi5wbmdcIjogNDUsXG5cdFwiLi9zZW5kYmFyX2ZpeGVkYm90dG9tX21vZGVfb2ZmX2hvdmVyLnBuZ1wiOiA0Nixcblx0XCIuL3NlbmRiYXJfZml4ZWRib3R0b21fbW9kZV9vbi5wbmdcIjogNDcsXG5cdFwiLi9zZW5kYmFyX2ZpeGVkYm90dG9tX21vZGVfb25faG92ZXIucG5nXCI6IDQ4LFxuXHRcIi4vc2VuZGJhcl9maXhlZHRvcF9tb2RlX29mZi5wbmdcIjogNDksXG5cdFwiLi9zZW5kYmFyX2ZpeGVkdG9wX21vZGVfb2ZmX2hvdmVyLnBuZ1wiOiA1MCxcblx0XCIuL3NlbmRiYXJfZml4ZWR0b3BfbW9kZV9vbi5wbmdcIjogNTEsXG5cdFwiLi9zZW5kYmFyX2ZpeGVkdG9wX21vZGVfb25faG92ZXIucG5nXCI6IDUyLFxuXHRcIi4vc2VuZGJhcl9tb3ZlcG9zX21vZGVfb2ZmLnBuZ1wiOiA1Myxcblx0XCIuL3NlbmRiYXJfbW92ZXBvc19tb2RlX29mZl9ob3Zlci5wbmdcIjogNTQsXG5cdFwiLi9zZW5kYmFyX21vdmVwb3NfbW9kZV9vbi5wbmdcIjogNTUsXG5cdFwiLi9zZW5kYmFyX21vdmVwb3NfbW9kZV9vbl9ob3Zlci5wbmdcIjogNTYsXG5cdFwiLi9zZXJjaGJhY2tncm91bmRpbWFnZS5wbmdcIjogNTcsXG5cdFwiLi9zdGF0ZV9idXR0b24ucG5nXCI6IDU4LFxuXHRcIi4vc3RhdGVfYnV0dG9uMC5wbmdcIjogNTksXG5cdFwiLi92aWRlb1BhZ2VVbmxvYWRlZC5wbmdcIjogNjAsXG5cdFwiLi92b2x1bWVfZGl2X21heC5wbmdcIjogNjEsXG5cdFwiLi92b2x1bWVfZGl2X21pbi5wbmdcIjogNjIsXG5cdFwiLi92b2x1bWVfZGl2X29mZi5wbmdcIjogNjMsXG5cdFwiLi92b2x1bWVidXR0b24ucG5nXCI6IDY0LFxuXHRcIi4vdm9sdW1lYnV0dG9uX2hvdmVyLnBuZ1wiOiA2NSxcblx0XCIuL3ZvbHVtZWxvd2J1dHRvbi5wbmdcIjogNjYsXG5cdFwiLi92b2x1bWVsb3didXR0b25faG92ZXIucG5nXCI6IDY3LFxuXHRcIi4vd2ViZnVsbHNjcmVlbl9vZmZfYnV0dG9uLnBuZ1wiOiA2OCxcblx0XCIuL3dlYmZ1bGxzY3JlZW5fb2ZmX2J1dHRvbl9ob3Zlci5wbmdcIjogNjksXG5cdFwiLi93ZWJmdWxsc2NyZWVuX29uX2J1dHRvbi5wbmdcIjogNzAsXG5cdFwiLi93aWRlc2NyZWVuX29mZl9idXR0b24ucG5nXCI6IDcxLFxuXHRcIi4vd2lkZXNjcmVlbl9vZmZfYnV0dG9uX2hvdmVyLnBuZ1wiOiA3Mixcblx0XCIuL3dpZGVzY3JlZW5fb25fYnV0dG9uLnBuZ1wiOiA3Myxcblx0XCIuL3dpZGVzY3JlZW5fb25fYnV0dG9uX2hvdmVyLnBuZ1wiOiA3NFxufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpO1xuXHRyZXR1cm4gaWQ7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDE7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzIG5vbnJlY3Vyc2l2ZSBeW1xcc1xcU10rJFxuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){eval('var map = {\n\t"./21771892x264.mp4": 75\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error("Cannot find module \'" + req + "\'.");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvdmlkZW9zIG5vbnJlY3Vyc2l2ZSBeW1xcc1xcU10rJD8yZTJkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcCA9IHtcblx0XCIuLzIxNzcxODkyeDI2NC5tcDRcIjogNzVcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3ZpZGVvcyBub25yZWN1cnNpdmUgXltcXHNcXFNdKyRcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction pauseDiv(pauseDiv) {\n    this.pauseDiv = pauseDiv;\n    this.outputCallback = function () {};\n    this.readyCallback = function () {};\n    this.run();\n}\npauseDiv.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    ready: function ready(signal) {\n        this.readyCallback(signal);\n    },\n    input: function input(inputSignal //inputSignal=show||hide\n    ) {\n        this.drawUI(inputSignal);\n    },\n    output: function output(outputSignal //outputSignal="play"||"pause"\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.drawUI("show");\n        this.ready("pauseDiv");\n    },\n    drawUI: function drawUI(signal) {\n        this.setPauseDivClass(signal);\n    },\n    setPauseDivClass: function setPauseDivClass(signal) {\n        switch (signal) {\n            case "show":\n                this.pauseDiv.setAttribute("name", "show");\n                break;\n            case "hide":\n                this.pauseDiv.setAttribute("name", "hide");\n                break;\n        }\n    },\n    eventInstall: function eventInstall() {\n        this.pauseDivClick();\n    },\n    pauseDivClick: function pauseDivClick() {\n        var that = this;\n        var clickCallback = function clickCallback() {\n            var outputSignal = void 0,\n                state = that.pauseDiv.getAttribute("name");\n            switch (state) {\n                case "show":\n                    that.drawUI("hide");\n                    outputSignal = "play";\n                    break;\n                case "hide":\n                    that.drawUI("show");\n                    outputSignal = "pause";\n                    break;\n            }\n            that.output(outputSignal);\n        };\n        this.pauseDiv.addEventListener("click", clickCallback);\n    }\n\n    // ========================================================================\n};function playPauseButton(playPauseButton) {\n    this.playPauseButton = playPauseButton;\n    this.outputCallback = function () {};\n    this.readyCallback = function () {};\n    this.run();\n}\nplayPauseButton.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    ready: function ready(signal) {\n        this.readyCallback(signal);\n    },\n    input: function input(inputSignal //inputSignal="playMode"||"pauseMode"\n    ) {\n        this.drawUI(inputSignal);\n    },\n    output: function output(outputSignal //outputSignal="play"||"pause"\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.drawUI("pauseMode");\n        this.ready("playPauseButton");\n    },\n    drawUI: function drawUI(signal //signal=="playMode"||"pauseMode"\n    ) {\n        this.setPlayPauseButtonClass(signal);\n    },\n    setPlayPauseButtonClass: function setPlayPauseButtonClass(signal //signal=="playMode"||"pauseMode"\n    ) {\n        switch (signal) {\n            case "playMode":\n                this.playPauseButton.setAttribute("name", "play-mode");\n                break;\n            case "pauseMode":\n                this.playPauseButton.setAttribute("name", "pause-mode");\n                break;\n        }\n    },\n\n    eventInstall: function eventInstall() {\n        this.playPauseButtonClick();\n    },\n    playPauseButtonClick: function playPauseButtonClick() {\n        var that = this;\n        var clickCallback = function clickCallback() {\n            var outputSignal = void 0,\n                state = that.playPauseButton.getAttribute("name");\n            switch (state) {\n                case "play-mode":\n                    that.drawUI("pauseMode");\n                    outputSignal = "pause";\n                    break;\n                case "pause-mode":\n                    that.drawUI("playMode");\n                    outputSignal = "play";\n                    break;\n            }\n            that.output(outputSignal);\n        };\n        this.playPauseButton.addEventListener("click", clickCallback);\n    }\n};\nfunction playPauseModule(videoPlayer) {\n    this.pauseStateDivModule = new pauseDiv(videoPlayer.getElementsByClassName("video-player-warp-main-controlsdiv")[0]);\n    this.playPauseButtonModule = new playPauseButton(videoPlayer.getElementsByClassName("video-player-warp-controls-playbutton")[0]);\n    this.outputCallback = function () {};\n    this.readyCallbackList = [];\n    this.moduleReadyProgress = 0; //max=2\n    this.run();\n}\nplayPauseModule.prototype = {\n    input: function input(inputSignal //inputSignal="play"||"pause"\n    ) {\n        switch (inputSignal) {\n            case "play":\n                this.playPauseButtonModule.input("playMode");\n                this.pauseStateDivModule.input("hide");\n                break;\n            case "pause":\n                this.playPauseButtonModule.input("pauseMode");\n                this.pauseStateDivModule.input("show");\n                break;\n        }\n    },\n    output: function output(outputSignal //outputSignal="play"||"pause"\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    run: function run() {\n        this.moduleConnect();\n    },\n    ready: function ready(readyState) {\n        for (var i = 0; i < this.readyCallbackList.length; i++) {\n            this.readyCallbackList[i](readyState);\n        }\n    },\n    firstSetUI: function firstSetUI() {\n        this.pauseStateDivModule.firstSetUI();\n        this.playPauseButtonModule.firstSetUI();\n        // this.ready("playPauseModule")\n    },\n    moduleConnect: function moduleConnect() {\n        this.pauseStateDivConnectPlayPauseButton();\n        this.playPauseButtonConnectPauseStateDiv();\n    },\n    pauseStateDivConnectPlayPauseButton: function pauseStateDivConnectPlayPauseButton() {\n        var that = this;\n        var pauseStateDivOutputCallback = function pauseStateDivOutputCallback(moduleOutputSignal) {\n            var moduleInputSignal = void 0,\n                mainOutputSignal = void 0;\n            switch (moduleOutputSignal) {\n                case "play":\n                    moduleInputSignal = "playMode";\n                    mainOutputSignal = "play";\n                    break;\n                case "pause":\n                    moduleInputSignal = "pauseMode";\n                    mainOutputSignal = "pause";\n                    break;\n            }\n            that.playPauseButtonModule.input(moduleInputSignal);\n            that.output(mainOutputSignal);\n        };\n        this.pauseStateDivModule.outputCallback = pauseStateDivOutputCallback;\n        var pauseStateDivReadyCallback = function pauseStateDivReadyCallback() {\n            that.moduleReadyProgress += 1;\n            if (that.moduleReadyProgress == 2) {\n                that.moduleReadyProgress = 0;\n                that.ready("playPauseModule");\n            }\n        };\n        this.pauseStateDivModule.readyCallback = pauseStateDivReadyCallback;\n    },\n    playPauseButtonConnectPauseStateDiv: function playPauseButtonConnectPauseStateDiv() {\n        var that = this;\n        var playPauseButtonOutputCallback = function playPauseButtonOutputCallback(moduleOutputSignal) {\n            var moduleInputSignal = void 0,\n                mainOutputSignal = void 0;\n            switch (moduleOutputSignal) {\n                case "play":\n                    moduleInputSignal = "hide";\n                    mainOutputSignal = "play";\n                    break;\n                case "pause":\n                    moduleInputSignal = "show";\n                    mainOutputSignal = "pause";\n                    break;\n            }\n            that.pauseStateDivModule.input(moduleInputSignal);\n            that.output(mainOutputSignal);\n        };\n        this.playPauseButtonModule.outputCallback = playPauseButtonOutputCallback;\n        var playPauseButtonReadyCallback = function playPauseButtonReadyCallback() {\n            that.moduleReadyProgress += 1;\n            if (that.moduleReadyProgress == 2) {\n                that.moduleReadyProgress = 0;\n                that.ready("playPauseModule");\n            }\n        };\n        this.playPauseButtonModule.readyCallback = playPauseButtonReadyCallback;\n    }\n\n    // ===========================================================================\n};var bufferedSlider = function bufferedSlider(videoPlayer) {\n    var bufferedLoadLine = videoPlayer.getElementsByClassName("video-player-warp-controls-progress-buffered")[0];\n    this.bufferedLoadLine = bufferedLoadLine;\n    this.readyCallbackList = [];\n    this.run();\n};\nbufferedSlider.prototype = {\n    run: function run() {\n        this.firstSetUI();\n    },\n    input: function input(inputSignal //inputSignal=0~1\n    ) {\n        this.drawUI(inputSignal);\n    },\n\n    firstSetUI: function firstSetUI() {\n        this.drawUI(0);\n        this.ready("bufferedSlider");\n    },\n    ready: function ready(readyState) {\n        for (var i = 0; i < this.readyCallbackList.length; i++) {\n            this.readyCallbackList[i](readyState);\n        }\n    },\n    drawUI: function drawUI(signal //signal=0~1\n    ) {\n        this.bufferedLoadLinePos(signal);\n    },\n    bufferedLoadLinePos: function bufferedLoadLinePos(signal //signal=0~1\n    ) {\n        this.bufferedLoadLine.style.left = -(100 - signal * 100) + "%";\n    }\n    // ===========================================================\n};var currentTimeSlider = function currentTimeSlider(videoPlayer) {\n    var currentTimeSlider = videoPlayer.getElementsByClassName("video-player-warp-controls-progress-currenttime")[0];\n    this.currentTimeSlider = currentTimeSlider;\n    this.currentTimeLoadLine = currentTimeSlider.getElementsByClassName("video-player-warp-controls-progress-currenttime-moveslider")[0];\n    this.currentTimeButton = currentTimeSlider.getElementsByClassName("video-player-warp-controls-progress-currenttime-moveslider-button")[0];\n    this.outputCallback = function () {};\n    this.readyCallbackList = [];\n    this.outputSpacing = false;\n    this.run();\n};\ncurrentTimeSlider.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    input: function input(inputSignal //inputSignal=0~1\n    ) {\n        this.drawUI(inputSignal);\n    },\n    output: function output(outputSignal //outputSignal=0~1\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.drawUI(0);\n        this.ready("currentTimeSlider");\n    },\n    ready: function ready(readyState) {\n        for (var i = 0; i < this.readyCallbackList.length; i++) {\n            this.readyCallbackList[i](readyState);\n        }\n    },\n    drawUI: function drawUI(signal //signal=0~1\n    ) {\n        this.setCurrentTimeLoadLinePos(signal);\n    },\n    setCurrentTimeLoadLinePos: function setCurrentTimeLoadLinePos(signal //signal=0~1\n    ) {\n        this.currentTimeLoadLine.style.left = -(100 - signal * 100) + "%";\n    },\n    eventInstall: function eventInstall() {\n        this.currentTimeButtonDrag();\n        this.sliderClick();\n    },\n    currentTimeButtonDrag: function currentTimeButtonDrag() {\n        var that = this;\n        var bodyMousemove = function bodyMousemove(event) {\n            var e = event || window.event;\n            var mousePosX = parseInt(e.clientX.toFixed(0));\n            var outputSignal = that.computeProportionOfMousePosXAndSliderLength(mousePosX);\n            that.drawUI(outputSignal);\n            that.output(outputSignal);\n        };\n        // let bodyMouseup=function(event){\n        //     let e=event||window.event\n        //     let mousePosX=e.clientX\n        //     let outputSignal=that.computeProportionOfMousePosXAndSliderLength(mousePosX)\n        //     that.output(outputSignal) \n        //     document.body.removeEventListener("mouseup",bodyMouseup)\n        // }\n        var mousedownCallback = function mousedownCallback() {\n            document.body.removeEventListener("mousemove", bodyMousemove);\n            document.body.addEventListener("mousemove", bodyMousemove);\n            // document.body.addEventListener("mouseup",bodyMouseup)\n        };\n        this.currentTimeButton.addEventListener("mousedown", mousedownCallback);\n        var mouseupCallback = function mouseupCallback(event) {\n            document.body.removeEventListener("mousemove", bodyMousemove);\n        };\n        document.body.addEventListener("mouseup", mouseupCallback);\n    },\n    sliderClick: function sliderClick() {\n        var that = this;\n        var clickCallback = function clickCallback(event) {\n            var e = event || window.event;\n            var el = e.target || e.srcElement;\n            if (el.id == "video-player-warp-controls-progress-currenttime-moveslider-button") return;\n            var mousePosX = e.clientX;\n            var outputSignal = that.computeProportionOfMousePosXAndSliderLength(mousePosX);\n            that.drawUI(outputSignal);\n            that.output(outputSignal);\n        };\n        this.currentTimeSlider.addEventListener("click", clickCallback);\n    },\n    computeProportionOfMousePosXAndSliderLength: function computeProportionOfMousePosXAndSliderLength(mousePosX) {\n        var minPosX = this.computeCurrentTimeSliderPosX();\n        var maxPosX = this.computeCurrentTimeSliderWidth() + minPosX;\n        if (mousePosX < minPosX) mousePosX = minPosX;\n        if (mousePosX > maxPosX) mousePosX = maxPosX;\n        return (mousePosX - minPosX) / (maxPosX - minPosX);\n    },\n    computeCurrentTimeSliderWidth: function computeCurrentTimeSliderWidth() {\n        return parseInt(this.currentTimeSlider.offsetWidth.toFixed(0));\n    },\n    computeCurrentTimeSliderPosX: function computeCurrentTimeSliderPosX() {\n        return parseInt(this.currentTimeSlider.getBoundingClientRect().left.toFixed(0));\n    }\n    // =================================================================\n};function timesDiv(videoPlayer) {\n    this.videoDom = videoPlayer.getElementsByClassName("video-player-warp-main-video")[0];\n    this.timesDiv = videoPlayer.getElementsByClassName("video-player-warp-controls-time")[0];\n    this.currentTimeText = this.timesDiv.getElementsByClassName("video-player-warp-controls-time-currenttime")[0];\n    this.durationText = this.timesDiv.getElementsByClassName("video-player-warp-controls-time-duration")[0];\n    this.readyCallbackList = [];\n    this.duration = undefined;\n    this.installedListenerDutationChangeOnce = false;\n    this.clearTimeoutID = null;\n    this.run();\n}\ntimesDiv.prototype = {\n    run: function run() {\n        this.firstSetUI();\n    },\n    input: function input(inputSignal //inputSignal=0~1\n    ) {\n        var duration = this.duration;\n        if (!duration) duration = 0;\n        var currentTime = duration * inputSignal;\n        this.drawUI({ currentTime: currentTime, duration: duration });\n    },\n    firstSetUI: function firstSetUI() {\n        this.drawUI({ currentTime: 0, duration: 0 });\n        var that = this;\n        // if(this.videoDom.readyState==4){\n        //     let duration=that.videoDom.duration\n        //     that.duration=duration\n        //     that.drawUI({currentTime:0,duration:duration})\n        // }\n        // else\n        //     this.listenerDutationChangeOnce()\n        this.addBeforePlayingDurationMonitoring();\n        that.ready("timesDiv");\n    },\n    addBeforePlayingDurationMonitoring: function addBeforePlayingDurationMonitoring() {\n        var that = this;\n        var durationMonitoring = function durationMonitoring() {\n            var duration = that.videoDom.duration;\n            that.duration = duration;\n            that.drawUI({ currentTime: 0, duration: duration });\n            that.clearTimeoutID = setTimeout(durationMonitoring, 400);\n        };\n        var playingCallback = function playingCallback() {\n            clearTimeout(that.clearTimeoutID);\n            that.videoDom.removeEventListener("playing", playingCallback);\n        };\n        this.videoDom.addEventListener("playing", playingCallback);\n        durationMonitoring();\n    },\n    ready: function ready(readyState) {\n        for (var i = 0; i < this.readyCallbackList.length; i++) {\n            this.readyCallbackList[i](readyState);\n        }\n    },\n    drawUI: function drawUI(signal //signal={currentTime:num,duration:num}\n    ) {\n        var currentTimeText = this.timeToText(signal.currentTime);\n        var durationText = this.timeToText(signal.duration);\n        this.textChildVoluation(this.currentTimeText, currentTimeText);\n        this.textChildVoluation(this.durationText, durationText);\n    },\n    timeToText: function timeToText(seconds) {\n        var padNumber = function padNumber(num, fill) {\n            var len = (\'\' + num).length;\n            return Array(fill > len ? fill - len + 1 || 0 : 0).join(0) + num;\n        };\n        var minutesText = padNumber(parseInt(seconds / 60), 2);\n        var secondsText = padNumber(parseInt(seconds % 60), 2);\n        return minutesText + ":" + secondsText;\n    },\n    textChildVoluation: function textChildVoluation(parentNode, textValue) {\n        if (parentNode.firstChild && parentNode.firstChild.nodeType == 3) parentNode.firstChild.nodeValue = textValue;else {\n            var newTextNode = document.createTextNode(textValue);\n            parentNode.appendChild(newTextNode);\n        }\n    },\n    listenerDutationChangeOnce: function listenerDutationChangeOnce() {\n        var that = this;\n        if (this.installedListenerDutationChangeOnce) return;\n        var durationChangeCallback = function durationChangeCallback() {\n            that.installedListenerDutationChangeOnce = false;\n            that.videoDom.removeEventListener("durationchange", durationChangeCallback);\n            var duration = that.videoDom.duration;\n            that.duration = duration;\n            that.drawUI({ currentTime: 0, duration: duration });\n            that.ready("timesDiv");\n        };\n        this.installedListenerDutationChangeOnce = true;\n        this.videoDom.addEventListener("durationchange", durationChangeCallback);\n    }\n};\nfunction timesModule(videoPlayer) {\n    this.currentTimeSliderControl = new currentTimeSlider(videoPlayer);\n    this.timesDivControl = new timesDiv(videoPlayer);\n    this.moduleReadyProgress = 0; //max=2\n    this.readyCallback = function () {};\n    this.readyCallbackList = [];\n    this.run();\n}\ntimesModule.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.moduleConnect();\n        this.moduleReadyListener();\n    },\n    input: function input(inputSignal //inputSignal=0~1\n    ) {\n        this.timesDivControl.input(inputSignal);\n        this.currentTimeSliderControl.input(inputSignal);\n    },\n    output: function output(outputSignal //outputSignal=0~1\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.moduleReadyProgress = 0;\n        this.currentTimeSliderControl.firstSetUI();\n        this.timesDivControl.firstSetUI();\n    },\n    ready: function ready(readyState) {\n        for (var i = 0; i < this.readyCallbackList.length; i++) {\n            this.readyCallbackList[i](readyState);\n        }\n    },\n    moduleConnect: function moduleConnect() {\n        this.currentTimeSliderConnectIimesDiv();\n    },\n    currentTimeSliderConnectIimesDiv: function currentTimeSliderConnectIimesDiv() {\n        var that = this;\n        var currentTimeSliderOutputCallback = function currentTimeSliderOutputCallback(outputSignal //outputSignal=0~1\n        ) {\n            that.timesDivControl.input(outputSignal);\n            that.output(outputSignal);\n        };\n        this.currentTimeSliderControl.outputCallback = currentTimeSliderOutputCallback;\n    },\n    moduleReadyListener: function moduleReadyListener() {\n        var that = this;\n        var moduleReadyCallback = function moduleReadyCallback() {\n            that.moduleReadyProgress++;\n            if (that.moduleReadyProgress == 2) {\n                that.moduleReadyProgress = 0;\n                that.ready("timesModule");\n            }\n        };\n        this.timesDivControl.readyCallbackList.push(moduleReadyCallback);\n        this.currentTimeSliderControl.readyCallbackList.push(moduleReadyCallback);\n    }\n\n    // ==================================================================\n};function volumeDiv(volumeDiv) {\n    this.volumeDiv = volumeDiv;\n    this.volumeDivNum = volumeDiv.getElementsByClassName("video-player-warp-main-volumediv-num")[0];\n    this.outputCallback = function () {};\n    this.readyCallback = function () {};\n    this.run();\n}\nvolumeDiv.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    input: function input(inputSignal //inputSignal=0~1\n    ) {\n        this.drawUI(inputSignal);\n    },\n    output: function output(outputSignal //outputSignal=0~1\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.drawUI(1);\n        this.ready("volumeDiv");\n    },\n    ready: function ready(signal) {\n        this.readyCallback(signal);\n    },\n\n    drawUI: function drawUI(signal //signal=0~1\n    ) {\n        this.setVolumeDivNum(signal);\n    },\n    setVolumeDivNum: function setVolumeDivNum(signal //signal=0~1\n    ) {\n        var num = (signal * 100).toFixed(0);\n        if (num > 30) this.volumeDiv.setAttribute("name", "volume-max-mode");else if (num > 0) this.volumeDiv.setAttribute("name", "volume-min-mode");else this.volumeDiv.setAttribute("name", "volume-off-mode");\n        this.textChildVoluation(this.volumeDivNum, num.toString());\n    },\n    textChildVoluation: function textChildVoluation(parentNode, textValue) {\n        if (parentNode.firstChild && parentNode.firstChild.nodeType == 3) parentNode.firstChild.nodeValue = textValue;else {\n            var newTextNode = document.createTextNode(textValue);\n            parentNode.appendChild(newTextNode);\n        }\n    },\n    eventInstall: function eventInstall() {\n        this.volumeDivMousewheel();\n    },\n    volumeDivMousewheel: function volumeDivMousewheel() {\n        var that = this;\n        var mousewheelCallback = function mousewheelCallback(event) {\n            var e = event || window.event;\n            e.preventDefault();\n            var mouseWheelData = void 0;\n            if (e.detail) mouseWheelData = -e.detail * 40;else if (e.wheelDelta) mouseWheelData = e.wheelDelta;\n            var volumeNum = parseInt(that.volumeDivNum.firstChild.nodeValue);\n            var volumeAddMinMum = 2;\n            if (mouseWheelData < 0) {\n                if (volumeNum >= volumeAddMinMum) volumeNum -= volumeAddMinMum;else volumeNum = 0;\n            } else if (mouseWheelData > 0) {\n                if (volumeNum <= 100 - volumeAddMinMum) volumeNum += volumeAddMinMum;else volumeNum = 100;\n            }\n            var outputSignal = volumeNum / 100;\n            that.drawUI(outputSignal);\n            that.output(outputSignal);\n        };\n\n        this.addMousewheelListener(this.volumeDiv, mousewheelCallback);\n    },\n    addMousewheelListener: function addMousewheelListener(el, callback) {\n        el.addEventListener("DOMMouseScroll", callback);\n        el.addEventListener("mousewheel", callback);\n    },\n    removeMousewheelListener: function removeMousewheelListener(el, callback) {\n        el.removeEventListener("DOMMouseScroll", callback);\n        el.removeEventListener("mousewheel", callback);\n    }\n\n    // =====================================================================\n};function volumeControl(volumeControl) {\n    this.volumeControl = volumeControl;\n    this.volumeSlider = volumeControl.getElementsByClassName("video-player-warp-controls-volume-slider-main-movebox")[0];\n    this.volumeButton = volumeControl.getElementsByClassName("video-player-warp-controls-volume-button")[0];\n    this.volumeText = volumeControl.getElementsByClassName("video-player-warp-controls-volume-slider-num")[0];\n    this.volumeMoveLine = volumeControl.getElementsByClassName("video-player-warp-controls-volume-slider-main-movement")[0];\n    this.volumeMoveButton = volumeControl.getElementsByClassName("video-player-warp-controls-volume-slider-main-movement-button")[0];\n    this.outputCallback = function () {};\n    this.readyCallback = function () {};\n    this.run();\n}\nvolumeControl.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    input: function input(inputSignal //inputSignal=0~1\n    ) {\n        this.drawUI(inputSignal);\n    },\n    output: function output(outputSignal //outputSignal=0~1\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.drawUI(1);\n        this.ready("volumeControl");\n    },\n    ready: function ready(signal) {\n        this.readyCallback(signal);\n    },\n    drawUI: function drawUI(signal //signal=0~1\n    ) {\n        this.setVolumeTextNum(signal);\n        this.setVolumeMoveLinePos(signal);\n        this.setVolumeButtonClass(signal);\n    },\n    setVolumeButtonClass: function setVolumeButtonClass(signal //signal=0~1\n    ) {\n        if (signal > 0.3) this.volumeButton.setAttribute("name", "volume-max-mode");else if (signal > 0) this.volumeButton.setAttribute("name", "volume-min-mode");else this.volumeButton.setAttribute("name", "volume-off-mode");\n    },\n    setVolumeTextNum: function setVolumeTextNum(signal //signal=0~1\n    ) {\n        this.textChildVoluation(this.volumeText, (signal * 100).toFixed(0));\n    },\n    textChildVoluation: function textChildVoluation(parentNode, textValue) {\n        if (parentNode.firstChild && parentNode.firstChild.nodeType == 3) parentNode.firstChild.nodeValue = textValue;else {\n            var newTextNode = document.createTextNode(textValue);\n            parentNode.appendChild(newTextNode);\n        }\n    },\n    setVolumeMoveLinePos: function setVolumeMoveLinePos(signal //signal=0~1\n    ) {\n        this.volumeMoveLine.style.bottom = -(100 - signal * 100) + "%";\n    },\n    eventInstall: function eventInstall() {\n        this.volumeMoveButtonDrag();\n        this.sliderClick();\n        this.volumeButtonClick();\n    },\n    volumeButtonClick: function volumeButtonClick() {\n        var previousVolumeTextNum = undefined;\n        var that = this;\n        var clickCallback = function clickCallback() {\n            var volumeButtonMode = that.volumeButton.getAttribute("name");\n            var outputSignal = void 0;\n            if (volumeButtonMode == "volume-off-mode") {\n                that.volumeText.firstChild.nodeValue = previousVolumeTextNum;\n                outputSignal = previousVolumeTextNum ? previousVolumeTextNum / 100 : 0.02;\n                that.drawUI(outputSignal);\n                that.output(outputSignal);\n            } else {\n                previousVolumeTextNum = that.volumeText.firstChild.nodeValue;\n                outputSignal = 0;\n                that.drawUI(outputSignal);\n                that.output(outputSignal);\n            }\n        };\n        that.volumeButton.addEventListener("click", clickCallback);\n    },\n    volumeMoveButtonDrag: function volumeMoveButtonDrag() {\n        var that = this;\n        var mousemoveCallback = function mousemoveCallback(event) {\n            var e = event || window.event;\n            var mousePosY = e.clientY;\n            var outputSignal = that.computeProportionOfMousePosYAndSliderLength(mousePosY);\n            that.drawUI(outputSignal);\n            that.output(outputSignal);\n        };\n        var mousedownCallback = function mousedownCallback() {\n            document.body.addEventListener("mousemove", mousemoveCallback);\n            var sliderBox = that.volumeSlider.parentNode.parentNode;\n            that.addClass(sliderBox, "video-player-warp-controls-volume-slider-hover");\n        };\n        var mouseupCallback = function mouseupCallback() {\n            document.body.removeEventListener("mousemove", mousemoveCallback);\n            var sliderBox = that.volumeSlider.parentNode.parentNode;\n            that.removeClass(sliderBox, "video-player-warp-controls-volume-slider-hover");\n        };\n        this.volumeMoveButton.addEventListener("mousedown", mousedownCallback);\n        document.body.addEventListener("mouseup", mouseupCallback);\n    },\n    sliderClick: function sliderClick() {\n        var that = this;\n        var clickCallback = function clickCallback(event) {\n            var e = event || window.event;\n            var el = e.target || e.srcElement;\n            if (el.id == "video-player-warp-controls-volume-slider-main-movement-button") return;\n            var mousePosY = e.clientY;\n            var outputSignal = that.computeProportionOfMousePosYAndSliderLength(mousePosY);\n            that.drawUI(outputSignal);\n            that.output(outputSignal);\n        };\n        this.volumeSlider.addEventListener("click", clickCallback);\n    },\n    computeProportionOfMousePosYAndSliderLength: function computeProportionOfMousePosYAndSliderLength(mousePosY) {\n        var minPosY = this.computeCurrentTimeSliderPosY();\n        var maxPosY = this.computeCurrentTimeSliderHeight() + minPosY;\n        if (mousePosY < minPosY) mousePosY = minPosY;\n        if (mousePosY > maxPosY) mousePosY = maxPosY;\n        return 1 - (mousePosY - minPosY) / (maxPosY - minPosY);\n    },\n    computeCurrentTimeSliderHeight: function computeCurrentTimeSliderHeight() {\n        return this.volumeSlider.offsetHeight;\n    },\n    computeCurrentTimeSliderPosY: function computeCurrentTimeSliderPosY() {\n        return this.volumeSlider.getBoundingClientRect().top;\n    },\n    addClass: function addClass(el, className) {\n        var elClass = el.getAttribute("class");\n        if (!elClass) el.setAttribute("class", className);else {\n            elClass = elClass.replace(className, "").replace(/\\s{2}/, " ");\n            if (new RegExp("^" + className + "$").test(elClass) || new RegExp("\\\\s" + className + "\\\\s").test(elClass) || new RegExp("^" + className + "\\\\s").test(elClass) || new RegExp("\\\\s" + className + "$").test(elClass)) return;else el.setAttribute("class", elClass + " " + className);\n        }\n    },\n    removeClass: function removeClass(el, className) {\n        var elClass = el.getAttribute("class");\n        if (elClass) {\n            elClass = elClass.replace(/\\s{2}/, " ");\n            if (new RegExp("^" + className + "$").test(elClass)) {\n                elClass = elClass.replace(new RegExp("^" + className + "$", "gim"), "");\n                el.setAttribute("class", elClass);\n            }\n            if (new RegExp("\\\\s" + className + "\\\\s").test(elClass)) {\n                elClass = elClass.replace(new RegExp("\\\\s" + className + "\\\\s", "gim"), " ");\n                el.setAttribute("class", elClass);\n            }\n            if (new RegExp("^" + className + "\\\\s").test(elClass)) {\n                elClass = elClass.replace(new RegExp("^" + className + "\\\\s", "gim"), "");\n                el.setAttribute("class", elClass);\n            }\n            if (new RegExp("\\\\s" + className + "$").test(elClass)) {\n                elClass = elClass.replace(new RegExp("\\\\s" + className + "$", "gim"), "");\n                el.setAttribute("class", elClass);\n            }\n        }\n    }\n};\nvar volumeModule = function volumeModule(videoPlayer) {\n    this.videoPlayer = videoPlayer;\n    this.volumeSliderModule = new volumeControl(videoPlayer.getElementsByClassName("video-player-warp-controls-volume")[0]);\n    this.volumeDivModule = new volumeDiv(videoPlayer.getElementsByClassName("video-player-warp-main-volumediv")[0]);\n    this.outputCallback = function () {};\n    this.readyCallbackList = [];\n    this.moduleReadyProgress = 0; //max=2\n    this.run();\n};\nvolumeModule.prototype = {\n    run: function run() {\n        this.moduleConnect();\n    },\n    firstSetUI: function firstSetUI() {\n        this.volumeSliderModule.firstSetUI();\n        this.volumeDivModule.firstSetUI();\n        // this.ready("volumeModule")\n    },\n    ready: function ready(readyState) {\n        for (var i = 0; i < this.readyCallbackList.length; i++) {\n            this.readyCallbackList[i](readyState);\n        }\n    },\n    input: function input(inputSignal //inputSignal=0~1\n    ) {\n        this.volumeDivModule.input(inputSignal);\n        this.volumeSliderModule.input(inputSignal);\n    },\n    output: function output(outputSignal //outputSignal=0~1\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    moduleConnect: function moduleConnect() {\n        this.volumeSliderConnectVolumeDiv();\n        this.VolumeDivConnectVolumeSlider();\n    },\n    volumeSliderConnectVolumeDiv: function volumeSliderConnectVolumeDiv() {\n        var that = this;\n        var moduleOutputCallback = function moduleOutputCallback(outputSignal) {\n            that.volumeDivModule.input(outputSignal);\n            that.output(outputSignal);\n        };\n        this.volumeSliderModule.outputCallback = moduleOutputCallback;\n        var moduleReadyCallback = function moduleReadyCallback() {\n            that.moduleReadyProgress++;\n            if (that.moduleReadyProgress == 2) {\n                that.moduleReadyProgress = 0;\n                that.ready("volumeModule");\n            }\n        };\n        this.volumeSliderModule.readyCallback = moduleReadyCallback;\n    },\n    VolumeDivConnectVolumeSlider: function VolumeDivConnectVolumeSlider() {\n        var that = this;\n        var moduleOutputCallback = function moduleOutputCallback(outputSignal) {\n            that.volumeSliderModule.input(outputSignal);\n            that.output(outputSignal);\n        };\n        this.volumeDivModule.outputCallback = moduleOutputCallback;\n        var moduleReadyCallback = function moduleReadyCallback() {\n            that.moduleReadyProgress++;\n            if (that.moduleReadyProgress == 2) {\n                that.moduleReadyProgress = 0;\n                that.ready("volumeModule");\n            }\n        };\n        this.volumeDivModule.readyCallback = moduleReadyCallback;\n    }\n\n    // ============================================================================\n};function danmuShowOpacity(opacitySlider) {\n    this.opacitySlider = opacitySlider;\n    this.opacityText = opacitySlider.getElementsByClassName("video-player-warp-controls-danmu-setting-opacity-slider-movement-num")[0];\n    this.opacityMoveParent = opacitySlider.getElementsByClassName("video-player-warp-controls-danmu-setting-opacity-slider-movebox")[0];\n    this.opacityMoveLine = opacitySlider.getElementsByClassName("video-player-warp-controls-danmu-setting-opacity-slider-movement")[0];\n    this.opacityMoveButton = opacitySlider.getElementsByClassName("video-player-warp-controls-danmu-setting-opacity-slider-movement-button")[0];\n    this.run();\n    this.outputCallback = function () {};\n}\ndanmuShowOpacity.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    input: function input(inputSignal //inputSignal=0~1\n    ) {\n        this.drawUI(inputSignal);\n    },\n    output: function output(outputSignal //outputSignal=0~1\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.drawUI(1);\n    },\n    drawUI: function drawUI(signal //signal=0~1\n    ) {\n        this.setOpacityTextNum(signal);\n        this.setOpacityMoveLinePos(signal);\n    },\n    setOpacityTextNum: function setOpacityTextNum(signal //signal=0~1\n    ) {\n        this.textChildVoluation(this.opacityText, (signal * 100).toFixed(0));\n    },\n    textChildVoluation: function textChildVoluation(parentNode, textValue) {\n        if (parentNode.firstChild && parentNode.firstChild.nodeType == 3) parentNode.firstChild.nodeValue = textValue;else {\n            var newTextNode = document.createTextNode(textValue);\n            parentNode.appendChild(newTextNode);\n        }\n    },\n    setOpacityMoveLinePos: function setOpacityMoveLinePos(signal //signal=0~1\n    ) {\n        this.opacityMoveLine.style.left = -(100 - signal * 100) + "%";\n    },\n    eventInstall: function eventInstall() {\n        this.opacityMoveButtonDrag();\n        this.sliderClick();\n    },\n    opacityMoveButtonDrag: function opacityMoveButtonDrag() {\n        var that = this;\n        var mousemoveCallback = function mousemoveCallback(event) {\n            var e = event || window.event;\n            var mousePosX = e.clientX;\n            var outputSignal = that.computeProportionOfMousePosXAndSliderLength(mousePosX);\n            that.drawUI(outputSignal);\n            that.output(outputSignal);\n        };\n        var mouseupCallback = function mouseupCallback() {\n            document.body.removeEventListener("mousemove", mousemoveCallback);\n            document.body.removeEventListener("mouseup", mouseupCallback);\n            var sliderBox = that.opacitySlider.parentNode.parentNode;\n            that.removeClass(sliderBox, "video-player-warp-controls-danmu-setting-hover");\n            that.removeClass(that.opacityText, "video-player-warp-controls-danmu-setting-opacity-slider-movement-num-show");\n        };\n        var mousedownCallback = function mousedownCallback() {\n            document.body.addEventListener("mousemove", mousemoveCallback);\n            document.body.addEventListener("mouseup", mouseupCallback);\n            var sliderBox = that.opacitySlider.parentNode.parentNode;\n            that.addClass(sliderBox, "video-player-warp-controls-danmu-setting-hover");\n            that.addClass(that.opacityText, "video-player-warp-controls-danmu-setting-opacity-slider-movement-num-show");\n        };\n        this.opacityMoveButton.addEventListener("mousedown", mousedownCallback);\n    },\n    sliderClick: function sliderClick() {\n        var that = this;\n        var clickCallback = function clickCallback(event) {\n            var e = event || window.event;\n            var el = e.target || e.srcElement;\n            if (el.id == "video-player-warp-controls-danmu-setting-opacity-slider-movement-button") return;\n            var mousePosX = e.clientX;\n            var outputSignal = that.computeProportionOfMousePosXAndSliderLength(mousePosX);\n            that.drawUI(outputSignal);\n            that.output(outputSignal);\n        };\n        this.opacitySlider.addEventListener("click", clickCallback);\n    },\n    computeProportionOfMousePosXAndSliderLength: function computeProportionOfMousePosXAndSliderLength(mousePosX) {\n        var minPosX = this.computeCurrentTimeSliderPosX();\n        var maxPosX = this.computeCurrentTimeSliderWidth() + minPosX;\n        if (mousePosX < minPosX) mousePosX = minPosX;\n        if (mousePosX > maxPosX) mousePosX = maxPosX;\n        return (mousePosX - minPosX) / (maxPosX - minPosX);\n    },\n    computeCurrentTimeSliderWidth: function computeCurrentTimeSliderWidth() {\n        return this.opacityMoveParent.offsetWidth;\n    },\n    computeCurrentTimeSliderPosX: function computeCurrentTimeSliderPosX() {\n        return this.opacityMoveParent.getBoundingClientRect().left;\n    },\n    addClass: function addClass(el, className) {\n        var elClass = el.getAttribute("class");\n        if (!elClass) el.setAttribute("class", className);else {\n            elClass = elClass.replace(className, "").replace(/\\s{2}/, " ");\n            if (new RegExp("^" + className + "$").test(elClass) || new RegExp("\\\\s" + className + "\\\\s").test(elClass) || new RegExp("^" + className + "\\\\s").test(elClass) || new RegExp("\\\\s" + className + "$").test(elClass)) return;else el.setAttribute("class", elClass + " " + className);\n        }\n    },\n    removeClass: function removeClass(el, className) {\n        var elClass = el.getAttribute("class");\n        if (elClass) {\n            elClass = elClass.replace(/\\s{2}/, " ");\n            if (new RegExp("^" + className + "$").test(elClass)) {\n                elClass = elClass.replace(new RegExp("^" + className + "$", "gim"), "");\n                el.setAttribute("class", elClass);\n            }\n            if (new RegExp("\\\\s" + className + "\\\\s").test(elClass)) {\n                elClass = elClass.replace(new RegExp("\\\\s" + className + "\\\\s", "gim"), " ");\n                el.setAttribute("class", elClass);\n            }\n            if (new RegExp("^" + className + "\\\\s").test(elClass)) {\n                elClass = elClass.replace(new RegExp("^" + className + "\\\\s", "gim"), "");\n                el.setAttribute("class", elClass);\n            }\n            if (new RegExp("\\\\s" + className + "$").test(elClass)) {\n                elClass = elClass.replace(new RegExp("\\\\s" + className + "$", "gim"), "");\n                el.setAttribute("class", elClass);\n            }\n        }\n    }\n\n    // ==========================\n};function danmuShowClean(danmuShowClean) {\n    this.danmuShowClean = danmuShowClean;\n    this.danmuShowCleanTypeMember = danmuShowClean.getElementsByClassName("video-player-warp-controls-danmu-setting-clean-option");\n    this.danmuShowCleanTypeMemberNum = 3;\n    this.danmuShowCleanTypeButton; //danmuShowCleanTypeButton=this.danmuShowCleanTypeMember[?].getElementsByClassName("video-player-warp-controls-danmu-setting-clean-option-button")[0]\n    this.outputCallback = function () {};\n    this.run();\n}\ndanmuShowClean.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    input: function input(inputSignal //inputSignal="all-danmu-on-mode"||"all-danmu-off-mode"\n    ) {\n        this.setAllMemberMode(inputSignal);\n    },\n    setAllMemberMode: function setAllMemberMode(signal //signal="all-danmu-on-mode"||"all-danmu-off-mode"\n    ) {\n        var that = this;\n        var returnErgodicCallback = function returnErgodicCallback(signal) {\n            return function (item) {\n                that.drawUI(item, signal);\n                var outputSignal = {\n                    type: "",\n                    mode: ""\n                };\n                outputSignal.type = item.getElementsByClassName("video-player-warp-controls-danmu-setting-clean-option-button")[0].getAttribute("name");\n                outputSignal.mode = signal;\n                that.output(outputSignal);\n            };\n        };\n        switch (signal) {\n            case "all-danmu-on-mode":\n                this.ergodicTypeMember(returnErgodicCallback("danmu-on"));\n                break;\n            case "all-danmu-off-mode":\n                this.ergodicTypeMember(returnErgodicCallback("danmu-off"));\n                break;\n        }\n    },\n    output: function output(outputSignal //outputSignal={type:"fixed-top"||"fixed-bottom"||"move-pos",mode:"danmu-on"||"danmu-off"}\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        var that = this;\n        var ergodicCallback = function ergodicCallback(item) {\n            that.drawUI(item, "danmu-on");\n        };\n        this.ergodicTypeMember(ergodicCallback);\n    },\n    ergodicTypeMember: function ergodicTypeMember(forEachCallback) {\n        var danmuShowCleanTypeMemberArr = [].slice.call(this.danmuShowCleanTypeMember);\n        danmuShowCleanTypeMemberArr.forEach(forEachCallback);\n    },\n    drawUI: function drawUI(typeMember, //typeMember=this.danmuShowCleanTypeMember[?]\n    signal //signal="danmu-on"||"danmu-off"\n    ) {\n        this.setDanmuShowCleanTypeMemberClass(typeMember, signal);\n    },\n    setDanmuShowCleanTypeMemberClass: function setDanmuShowCleanTypeMemberClass(typeMember, //typeMember=this.danmuShowCleanTypeMember[?]\n    signal //signal="danmu-on"||"danmu-off"\n    ) {\n        switch (signal) {\n            case "danmu-on":\n                typeMember.setAttribute("name", "danmu-on-mode");\n                break;\n            case "danmu-off":\n                typeMember.setAttribute("name", "danmu-off-mode");\n                break;\n        }\n    },\n    eventInstall: function eventInstall() {\n        this.cleanButtonClick();\n    },\n    cleanButtonClick: function cleanButtonClick() {\n        var that = this;\n        var clickCallback = function clickCallback(event) {\n            var e = event || window.event;\n            var target = e.target || e.srcElement;\n            var outputSignal = {\n                type: "",\n                mode: ""\n            };\n            outputSignal.type = target.getAttribute("name");\n            var cleanBox = target.parentNode;\n            var state = cleanBox.getAttribute("name");\n            switch (state) {\n                case "danmu-on-mode":\n                    that.drawUI(cleanBox, "danmu-off");\n                    outputSignal.mode = "danmu-off";\n                    break;\n                case "danmu-off-mode":\n                    that.drawUI(cleanBox, "danmu-on");\n                    outputSignal.mode = "danmu-on";\n                    break;\n            }\n            that.output(outputSignal);\n        };\n        var ergodicCallback = function ergodicCallback(item) {\n            var typeButton = item.getElementsByClassName("video-player-warp-controls-danmu-setting-clean-option-button")[0];\n            typeButton.addEventListener("click", clickCallback);\n        };\n        this.ergodicTypeMember(ergodicCallback);\n    }\n};\nfunction danmuShowSetting(videoPlayer) {\n    var danmuShowSetting = videoPlayer.getElementsByClassName("video-player-warp-controls-danmu")[0];\n    this.danmuShowSetting = danmuShowSetting;\n    this.danmuShowSettingButton = danmuShowSetting.getElementsByClassName("video-player-warp-controls-danmu-button")[0];\n    this.danmuShowSettingBox = danmuShowSetting.getElementsByClassName("video-player-warp-controls-danmu-setting")[0];\n    this.danmuShowOpacityControl = danmuShowSetting.getElementsByClassName("video-player-warp-controls-danmu-setting-opacity-slider")[0];\n    this.danmuShowOpacityModule = new danmuShowOpacity(this.danmuShowOpacityControl);\n    this.danmuShowCleanControl = danmuShowSetting.getElementsByClassName("video-player-warp-controls-danmu-setting-clean")[0];\n    this.danmuShowCleanModule = new danmuShowClean(this.danmuShowCleanControl);\n    this.outputCallback = function () {};\n    this.readyCallbackList = [];\n    this.run();\n}\ndanmuShowSetting.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n        this.moduleConnect();\n    },\n    output: function output(outputSignal //signal="all-danmu-on"||"all-danmu-off"\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    moduleConnect: function moduleConnect() {\n        var that = this;\n        this.outputCallback = function (outputSignal) {\n            that.danmuShowCleanModule.input(outputSignal);\n        };\n    },\n    firstSetUI: function firstSetUI() {\n        this.danmuShowOpacityModule.firstSetUI();\n        this.danmuShowCleanModule.firstSetUI();\n        this.drawUI("all-danmu-on-mode");\n        this.danmuShowSettingBox.style.display = "";\n        this.ready("danmuShowSetting");\n    },\n    ready: function ready(readyState) {\n        for (var i = 0; i < this.readyCallbackList.length; i++) {\n            this.readyCallbackList[i](readyState);\n        }\n    },\n    drawUI: function drawUI(signal //signal="all-danmu-on-mode"||"all-danmu-off-mode"\n    ) {\n        this.setDanmuShowSettingClass(signal);\n    },\n    setDanmuShowSettingClass: function setDanmuShowSettingClass(signal //signal="all-danmu-on-mode"||"all-danmu-off-mode"\n    ) {\n        switch (signal) {\n            case "all-danmu-on-mode":\n                this.danmuShowSetting.setAttribute("name", "danmu-on-mode");\n                break;\n            case "all-danmu-off-mode":\n                this.danmuShowSetting.setAttribute("name", "danmu-off-mode");\n                break;\n        }\n    },\n    eventInstall: function eventInstall() {\n        this.danmuShowSettingButtonClick();\n        this.danmuShowSettingBoxMouseover();\n    },\n    danmuShowSettingButtonClick: function danmuShowSettingButtonClick() {\n        var that = this;\n        var clickCallback = function clickCallback() {\n            var outputSignal = void 0,\n                state = that.danmuShowSetting.getAttribute("name");\n            switch (state) {\n                case "danmu-on-mode":\n                    outputSignal = "all-danmu-off-mode";\n                    break;\n                case "danmu-off-mode":\n                    outputSignal = "all-danmu-on-mode";\n                    break;\n            }\n            that.drawUI(outputSignal);\n            that.output(outputSignal);\n        };\n        this.danmuShowSettingButton.addEventListener("click", clickCallback);\n    },\n    danmuShowSettingBoxMouseover: function danmuShowSettingBoxMouseover() {\n        var that = this;\n        var clearTimeoutID = null;\n        var boxMouseoverCallback = function boxMouseoverCallback() {\n            clearTimeout(clearTimeoutID);\n            that.danmuShowSettingBox.style.display = "block";\n        };\n        this.danmuShowSettingBox.addEventListener("mouseover", boxMouseoverCallback);\n        var bodyMousemovetCallback = function bodyMousemovetCallback(event) {\n            var e = event || window.event;\n            var target = e.target || e.srcElement;\n            var isBoxMouseout = function isBoxMouseout(target) {\n                if (target.id == "video-player-warp-controls-danmu-setting") return false;\n                if (!target.parentNode) return true;else return isBoxMouseout(target.parentNode);\n            };\n            if (isBoxMouseout(target) == true) that.danmuShowSettingBox.style.display = "";\n        };\n        document.body.addEventListener("mousemove", bodyMousemovetCallback);\n    }\n};\n\nfunction repeatControl(videoPlayer) {\n    var repeatControl = videoPlayer.getElementsByClassName("video-player-warp-controls-repeat")[0];\n    this.repeatControl = repeatControl;\n    this.repeatButton = repeatControl.getElementsByClassName("video-player-warp-controls-repeat-button")[0];\n    this.outputCallback = function () {};\n    this.readyCallbackList = [];\n    this.run();\n}\nrepeatControl.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    input: function input(inputSignal //inputSignal="repeat-on"||"repeat-off"\n    ) {\n        this.drawUI(inputSignal);\n    },\n    output: function output(outputSignal //outputSignal="repeat-on"||"repeat-off"\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.drawUI("repeat-off");\n        this.ready("repeatControl");\n    },\n    ready: function ready(readyState) {\n        for (var i = 0; i < this.readyCallbackList.length; i++) {\n            this.readyCallbackList[i](readyState);\n        }\n    },\n\n    drawUI: function drawUI(signal //signal="repeat-on"||"repeat-off"\n    ) {\n        this.setRepeatButtonClass(signal);\n    },\n    setRepeatButtonClass: function setRepeatButtonClass(signal //signal="repeat-on"||"repeat-off"\n    ) {\n        switch (signal) {\n            case "repeat-on":\n                this.repeatButton.setAttribute("name", "repeat-on-mode");\n                break;\n            case "repeat-off":\n                this.repeatButton.setAttribute("name", "repeat-off-mode");\n                break;\n        }\n    },\n    eventInstall: function eventInstall() {\n        this.repeatButtonClick();\n    },\n    repeatButtonClick: function repeatButtonClick() {\n        var that = this;\n        var clickCallback = function clickCallback(event) {\n            var e = event || window.event;\n            var target = that.getEventCurrentTarget(e.target || e.srcElement, "video-player-warp-controls-repeat-button");\n            var outputSignal = void 0,\n                state = target.getAttribute("name");\n            switch (state) {\n                case "repeat-on-mode":\n                    outputSignal = "repeat-off";\n                    break;\n                case "repeat-off-mode":\n                    outputSignal = "repeat-on";\n                    break;\n            }\n            that.drawUI(outputSignal);\n            that.output(outputSignal);\n        };\n        this.repeatButton.addEventListener("click", clickCallback);\n    },\n    getEventCurrentTarget: function getEventCurrentTarget(el, id) {\n        if (el.id == id) return el;else return this.getEventCurrentTarget(el.parentNode, id);\n    }\n\n    // =================================================================\n};function wideScreenControl(wideScreenControl) {\n    this.wideScreenControl = wideScreenControl;\n    this.wideScreenButton = wideScreenControl.getElementsByClassName("video-player-warp-controls-widescreen-button")[0];\n    this.outputCallback = function () {};\n    this.run();\n}\nwideScreenControl.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    input: function input(inputSignal //inputSignal="wideScreen-on"||"wideScreen-off"\n    ) {\n        this.drawUI(inputSignal);\n    },\n    output: function output(outputSignal //outputSignal="wideScreen-on"||"wideScreen-off"\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.drawUI("wideScreen-off");\n    },\n    drawUI: function drawUI(signal //signal="wideScreen-on"||"wideScreen-off"\n    ) {\n        this.setWideScreenButtonClass(signal);\n    },\n    setWideScreenButtonClass: function setWideScreenButtonClass(signal //signal="wideScreen-on"||"wideScreen-off"\n    ) {\n        switch (signal) {\n            case "wideScreen-on":\n                this.wideScreenButton.setAttribute("name", "widescreen-on-mode");\n                break;\n            case "wideScreen-off":\n                this.wideScreenButton.setAttribute("name", "widescreen-off-mode");\n                break;\n        }\n    },\n    eventInstall: function eventInstall() {\n        this.widescreenButtonClick();\n    },\n    widescreenButtonClick: function widescreenButtonClick() {\n        var that = this;\n        var clickCallback = function clickCallback(event) {\n            var e = event || window.event;\n            var target = that.getEventCurrentTarget(e.target || e.srcElement, "video-player-warp-controls-widescreen-button");\n            var outputSignal = void 0,\n                state = target.getAttribute("name");\n            switch (state) {\n                case "widescreen-on-mode":\n                    outputSignal = "wideScreen-off";\n                    break;\n                case "widescreen-off-mode":\n                    outputSignal = "wideScreen-on";\n                    break;\n            }\n            that.drawUI(outputSignal);\n            that.output(outputSignal);\n        };\n        this.wideScreenButton.addEventListener("click", clickCallback);\n    },\n    getEventCurrentTarget: function getEventCurrentTarget(el, id) {\n        if (el.id == id) return el;else return this.getEventCurrentTarget(el.parentNode, id);\n    }\n\n    // ==========================================================================\n};function webfullScreenControl(webfullScreenControl) {\n    this.webfullScreenControl = webfullScreenControl;\n    this.webfullScreenButton = webfullScreenControl.getElementsByClassName("video-player-warp-controls-webfullscreen-button")[0];\n    this.outputCallback = function () {};\n    this.run();\n}\nwebfullScreenControl.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    input: function input(inputSignal //inputSignal="webfullScreen-on"||"webfullScreen-off"\n    ) {\n        this.drawUI(inputSignal);\n    },\n    output: function output(outputSignal //outputSignal="webfullScreen-on"||"webfullScreen-off"\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.drawUI("webfullScreen-off");\n    },\n    drawUI: function drawUI(signal //signal="webfullScreen-on"||"webfullScreen-off"\n    ) {\n        this.setWebfullScreenButtonClass(signal);\n    },\n    setWebfullScreenButtonClass: function setWebfullScreenButtonClass(signal //signal="webfullScreen-on"||"webfullScreen-off"\n    ) {\n        switch (signal) {\n            case "webfullScreen-on":\n                this.webfullScreenButton.setAttribute("name", "webfullscreen-on-mode");\n                break;\n            case "webfullScreen-off":\n                this.webfullScreenButton.setAttribute("name", "webfullscreen-off-mode");\n                break;\n        }\n    },\n    eventInstall: function eventInstall() {\n        this.webfullScreenButtonClick();\n    },\n    webfullScreenButtonClick: function webfullScreenButtonClick() {\n        var that = this;\n        var clickCallback = function clickCallback(event) {\n            var e = event || window.event;\n            var target = that.getEventCurrentTarget(e.target || e.srcElement, "video-player-warp-controls-webfullscreen-button");\n            var outputSignal = void 0,\n                state = target.getAttribute("name");\n            switch (state) {\n                case "webfullscreen-on-mode":\n                    outputSignal = "webfullScreen-off";\n                    break;\n                case "webfullscreen-off-mode":\n                    outputSignal = "webfullScreen-on";\n                    break;\n            }\n            that.drawUI(outputSignal);\n            that.output(outputSignal);\n        };\n        this.webfullScreenButton.addEventListener("click", clickCallback);\n    },\n    getEventCurrentTarget: function getEventCurrentTarget(el, id) {\n        if (el.id == id) return el;else return this.getEventCurrentTarget(el.parentNode, id);\n    }\n\n    // ==========================================================================\n};function browserfullscreenControl(browserfullscreenControl) {\n    this.browserfullscreenControl = browserfullscreenControl;\n    this.browserfullscreenButton = browserfullscreenControl.getElementsByClassName("video-player-warp-controls-browserfullscreen-button")[0];\n    this.outputCallback = function () {};\n    this.run();\n}\nbrowserfullscreenControl.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    input: function input(inputSignal //inputSignal="browserfullScreen-on"||"browserfullScreen-off"\n    ) {\n        this.drawUI(inputSignal);\n    },\n    output: function output(outputSignal //outputSignal="browserfullScreen-on"||"browserfullScreen-off"\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.drawUI("browserfullScreen-off");\n    },\n    drawUI: function drawUI(signal //signal="browserfullScreen-on"||"browserfullScreen-off"\n    ) {\n        this.setBrowserfullscreenButtonClass(signal);\n    },\n    setBrowserfullscreenButtonClass: function setBrowserfullscreenButtonClass(signal //signal="browserfullScreen-on"||"browserfullScreen-off"\n    ) {\n        switch (signal) {\n            case "browserfullScreen-on":\n                this.browserfullscreenButton.setAttribute("name", "browserfullscreen-on-mode");\n                break;\n            case "browserfullScreen-off":\n                this.browserfullscreenButton.setAttribute("name", "browserfullscreen-off-mode");\n                break;\n        }\n    },\n    eventInstall: function eventInstall() {\n        this.browserfullScreenButtonClick();\n    },\n    browserfullScreenButtonClick: function browserfullScreenButtonClick() {\n        var that = this;\n        var clickCallback = function clickCallback(event) {\n            var e = event || window.event;\n            var target = that.getEventCurrentTarget(e.target || e.srcElement, "video-player-warp-controls-browserfullscreen-button");\n            var outputSignal = void 0,\n                state = target.getAttribute("name");\n            switch (state) {\n                case "browserfullscreen-on-mode":\n                    outputSignal = "browserfullScreen-off";\n                    break;\n                case "browserfullscreen-off-mode":\n                    outputSignal = "browserfullScreen-on";\n                    break;\n            }\n            that.drawUI(outputSignal);\n            that.output(outputSignal);\n        };\n        this.browserfullscreenButton.addEventListener("click", clickCallback);\n    },\n    getEventCurrentTarget: function getEventCurrentTarget(el, id) {\n        if (el.id == id) return el;else return this.getEventCurrentTarget(el.parentNode, id);\n    }\n\n};\n\nfunction screenResizeComputer(playerScreen) {\n    this.playerScreen = playerScreen;\n    this.playerScreenNatrueWidth = this.playerScreen.offsetWidth;\n    this.playerScreenNatrueHeight = this.playerScreen.offsetHeight;\n    {\n        this.headerBar = playerScreen.getElementsByClassName("video-player-warp-header")[0];\n    }\n    {\n        this.televisionScreen = playerScreen.getElementsByClassName("video-player-warp-main")[0];\n        this.volumeDiv = this.televisionScreen.getElementsByClassName("video-player-warp-main-volumediv")[0];\n    }\n    {\n        this.controlsBar = playerScreen.getElementsByClassName("video-player-warp-controls")[0];\n        this.controlsBarNatrueHeight = this.controlsBar.offsetHeight;\n        this.controlsBarVariableChild = this.controlsBar.getElementsByClassName("video-player-warp-controls-progress")[0];\n        this.controlsBarVariableChildNatrueWidth = this.controlsBarVariableChild.offsetWidth;\n        this.controlsBarVariableChildFixedHeight = this.controlsBarVariableChild.offsetHeight;\n    }\n    {\n        this.sendBar = playerScreen.getElementsByClassName("video-player-warp-sendbar")[0];\n        this.sendBarNatrueHeight = this.sendBar.offsetHeight;\n        this.sendBarVariableChild = this.sendBar.getElementsByClassName("video-player-warp-sendbar-input")[0];\n        this.sendBarVariableChildNatrueWidth = this.sendBarVariableChild.offsetWidth;\n        this.sendBarVariableChildFixedHeight = this.sendBarVariableChild.offsetHeight;\n    }\n    this.redrawUICallbackList = [];\n    this.hadRequestFullscreen = false;\n    this.beforeRequestFullscreenWidth = undefined;\n    this.beforeRequestFullscreenHeight = undefined;\n    this.hideControlBarTimeoutID = null;\n    this.hideVolumeDivTimeoutID = null;\n    this.outputCallback = function () {};\n}\nscreenResizeComputer.prototype = {\n    input: function input(inputSignal //inputSignal="wideScreen||webfullScreen||browserfullScreen-on||off"\n    ) {\n        this.drawUI(inputSignal);\n    },\n    output: function output(outputSignal) {\n        this.outputCallback(outputSignal);\n    },\n    drawUI: function drawUI(signal) {\n        this.redrawUI();\n        switch (signal) {\n            case "wideScreen-on":\n                this.drawWideScreenMode();\n                break;\n            case "webfullScreen-on":\n                this.drawWebFullScreenScreenMode();\n                break;\n            case "browserfullScreen-on":\n                this.drawBrowserFullScreenScreenMode();\n                break;\n        }\n    },\n    redrawUI: function redrawUI() {\n        var redrawUICallbackList = this.redrawUICallbackList;\n        for (var i = 0; i < redrawUICallbackList.length; i++) {\n            redrawUICallbackList[i]();\n        }this.redrawUICallbackList = [];\n    },\n    hideHeaderBar: function hideHeaderBar() {\n        this.headerBar.style.display = "none";\n    },\n    unhideHeaderBar: function unhideHeaderBar() {\n        this.headerBar.style.display = "";\n    },\n    setVariableElementSize: function setVariableElementSize(screenWidth, screenHeight) {\n        var computeTelevisionScreenHeightNum = this.computeTelevisionScreenHeight(screenHeight);\n        this.setTelevisionScreenHeight(computeTelevisionScreenHeightNum);\n        var computeControlsBarVariableChildWidthNum = this.computeControlsBarVariableChildWidth(screenWidth);\n        this.setControlsBarVariableChildWidth(computeControlsBarVariableChildWidthNum);\n        var computeSendBarVariableChildWidthNum = this.computeSendBarVariableChildWidth(screenWidth);\n        this.setSendBarVariableChildWidth(computeSendBarVariableChildWidthNum);\n    },\n    resetVariableElementSize: function resetVariableElementSize() {\n        this.resetTelevisionScreenHeight();\n        this.resetControlsBarVariableChildWidth();\n        this.resetSendBarVariableChildWidth();\n    },\n    computeTelevisionScreenHeight: function computeTelevisionScreenHeight(screenHeight) {\n        return screenHeight - (this.controlsBarVariableChildFixedHeight + this.sendBarVariableChildFixedHeight);\n    },\n    setTelevisionScreenHeight: function setTelevisionScreenHeight(height) {\n        this.televisionScreen.style.height = height + "px";\n    },\n    resetTelevisionScreenHeight: function resetTelevisionScreenHeight() {\n        this.televisionScreen.style.height = "";\n    },\n    computeControlsBarVariableChildWidth: function computeControlsBarVariableChildWidth(screenWidth) {\n        return screenWidth - this.playerScreenNatrueWidth + this.controlsBarVariableChildNatrueWidth;\n    },\n    setControlsBarVariableChildWidth: function setControlsBarVariableChildWidth(width) {\n        this.controlsBarVariableChild.style.width = width + "px";\n    },\n    resetControlsBarVariableChildWidth: function resetControlsBarVariableChildWidth() {\n        this.controlsBarVariableChild.style.width = "";\n    },\n    computeSendBarVariableChildWidth: function computeSendBarVariableChildWidth(screenWidth) {\n        return screenWidth - this.playerScreenNatrueWidth + this.sendBarVariableChildNatrueWidth;\n    },\n    setSendBarVariableChildWidth: function setSendBarVariableChildWidth(width) {\n        this.sendBarVariableChild.style.width = width + "px";\n    },\n    resetSendBarVariableChildWidth: function resetSendBarVariableChildWidth() {\n        this.sendBarVariableChild.style.width = "";\n    },\n    drawWideScreenMode: function drawWideScreenMode() {\n        var wideScreenWidth = this.getWideScreenWidth();\n        var wideScreenHeight = this.getWideScreenHeight();\n        this.hideHeaderBar();\n        this.playerScreen.style.position = "relative";\n        this.playerScreen.style.float = "left";\n        // this.playerScreen.style.top=0;\n        // this.playerScreen.style.left=0;\n        this.playerScreen.style.width = wideScreenWidth + "px";\n        this.playerScreen.style.height = wideScreenHeight + "px";\n        this.setVariableElementSize(wideScreenWidth, wideScreenHeight);\n        this.playerScreen.style.height = "";\n        this.televisionScreen.style.height = 669 + "px";\n        var that = this;\n        this.redrawUICallbackList.push(function () {\n            that.unhideHeaderBar();\n            that.playerScreen.style.position = "";\n            that.playerScreen.style.float = "";\n            that.playerScreen.style.width = "";\n            that.playerScreen.style.height = "";\n            that.televisionScreen.style.height = "";\n            that.resetVariableElementSize();\n            that.output("wideScreen-off");\n        });\n    },\n    drawWebFullScreenScreenMode: function drawWebFullScreenScreenMode() {\n        this.playerScreen.style.position = "fixed";\n        this.hideSlider();\n        var WebFullScreeWidth = void 0,\n            WebFullScreeHeight = void 0;\n        if (this.hadRequestFullscreen) {\n            WebFullScreeWidth = this.beforeRequestFullscreenWidth;\n            WebFullScreeHeight = this.beforeRequestFullscreenHeight;\n        } else {\n            WebFullScreeWidth = this.getFullScreenWidth();\n            WebFullScreeHeight = this.getFullScreenHeight();\n        }\n        this.hideHeaderBar();\n        this.playerScreen.style.position = "fixed";\n        this.playerScreen.style.top = 0;\n        this.playerScreen.style.left = 0;\n        this.playerScreen.style.width = "100%";\n        this.playerScreen.style.height = "100%";\n        this.setVariableElementSize(WebFullScreeWidth, WebFullScreeHeight);\n        var that = this;\n        var windowResizeCallback = function windowResizeCallback() {\n            var WebFullScreeWidth = that.getFullScreenWidth();\n            var WebFullScreeHeight = that.getFullScreenHeight();\n            that.playerScreen.style.width = "100%";\n            that.playerScreen.style.height = "100%";\n            that.setVariableElementSize(WebFullScreeWidth, WebFullScreeHeight);\n        };\n        window.addEventListener("resize", windowResizeCallback);\n        this.redrawUICallbackList.push(function () {\n            window.removeEventListener("resize", windowResizeCallback);\n            that.unhideSlider();\n            that.unhideHeaderBar();\n            that.playerScreen.style.position = "";\n            that.playerScreen.style.top = "";\n            that.playerScreen.style.left = "";\n            that.playerScreen.style.width = "";\n            that.playerScreen.style.height = "";\n            that.resetVariableElementSize();\n            that.output("webfullScreen-off");\n        });\n    },\n    drawBrowserFullScreenScreenMode: function drawBrowserFullScreenScreenMode() {\n        var that = this;\n        this.hideSlider();\n        this.beforeRequestFullscreenWidth = this.getFullScreenWidth();\n        this.beforeRequestFullscreenHeight = this.getFullScreenHeight();\n        this.hadRequestFullscreen = true;\n\n        var canvasElement = that.playerScreen.getElementsByClassName("video-player-warp-main-canvas")[0];\n        var openBrowserFullScreenCallback = function openBrowserFullScreenCallback() {\n            var browserFullScreeWidth = that.getFullScreenWidth();\n            var browserFullScreeHeight = that.getFullScreenHeight();\n            that.hideHeaderBar();\n            that.playerScreen.style.position = "fixed";\n            that.playerScreen.style.top = 0;\n            that.playerScreen.style.left = 0;\n            that.playerScreen.style.width = "100%";\n            that.playerScreen.style.height = "100%";\n            that.setVariableElementSize(browserFullScreeWidth, browserFullScreeHeight);\n            that.televisionScreen.style.width = "100%";\n            that.televisionScreen.style.height = "100%";\n            canvasElement.style.marginTop = "-22px";\n            that.controlsBar.style.position = "absolute";\n            that.controlsBar.style.left = 0;\n            that.controlsBar.style.bottom = 0;\n            that.controlsBar.style.opacity = 0;\n            that.volumeDiv.style.display = "block";\n            that.volumeDiv.style.opacity = 0;\n            that.showControlBarLittleTime();\n            var mousemoveCallback = function mousemoveCallback() {\n                that.showControlBarLittleTime();\n            };\n            that.televisionScreen.addEventListener("mousemove", mousemoveCallback);\n            var mouseoverCallback = function mouseoverCallback() {\n                that.clearHideControlBarTimeout();\n                that.controlsBar.style.opacity = 1;\n            };\n            that.controlsBar.addEventListener("mouseover", mouseoverCallback);\n            var mousewheelCallback = function mousewheelCallback() {\n                that.showVolumeDivLittleTime();\n            };\n            that.addMousewheelListener(that.televisionScreen, mousewheelCallback);\n            that.redrawUICallbackList.push(function () {\n                that.clearHideControlBarTimeout();\n                that.clearHideVolumeDivTimeout();\n                that.closeBrowserFullScreen();\n                that.unhideSlider();\n                that.unhideHeaderBar();\n                that.playerScreen.style.position = "";\n                that.playerScreen.style.top = "";\n                that.playerScreen.style.left = "";\n                that.playerScreen.style.width = "";\n                that.playerScreen.style.height = "";\n                that.resetVariableElementSize();\n                that.televisionScreen.style.width = "";\n                that.televisionScreen.style.height = "";\n                canvasElement.style.marginTop = "";\n                that.controlsBar.style.position = "";\n                that.controlsBar.style.left = "";\n                that.controlsBar.style.bottom = "";\n                that.controlsBar.style.opacity = "";\n                that.volumeDiv.style.display = "";\n                that.televisionScreen.removeEventListener("mousemove", mousemoveCallback);\n                that.controlsBar.removeEventListener("mouseover", mouseoverCallback);\n                that.removeMousewheelListener(that.televisionScreen, mousewheelCallback);\n                that.output("browserfullScreen-off");\n                setTimeout(function () {\n                    that.hadRequestFullscreen = false;\n                }, 400);\n            });\n            that.removeFullscreenchangeListener(openBrowserFullScreenCallback);\n        };\n        this.addFullscreenchangeListener(openBrowserFullScreenCallback);\n        this.openBrowserFullScreen();\n    },\n    getWideScreenWidth: function getWideScreenWidth() {\n        return this.playerScreen.parentNode.parentNode.offsetWidth;\n    },\n    getWideScreenHeight: function getWideScreenHeight() {\n        return this.playerScreen.parentNode.parentNode.offsetHeight;\n    },\n    getFullScreenWidth: function getFullScreenWidth() {\n        return document.documentElement.clientWidth;\n    },\n    getFullScreenHeight: function getFullScreenHeight() {\n        return document.documentElement.clientHeight;\n    },\n    openBrowserFullScreen: function openBrowserFullScreen() {\n        var isFullscreen = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;\n        var el = document.documentElement;\n        if (!isFullscreen) {\n            el.requestFullscreen && el.requestFullscreen() || el.mozRequestFullScreen && el.mozRequestFullScreen() || el.webkitRequestFullscreen && el.webkitRequestFullscreen() || el.msRequestFullscreen && el.msRequestFullscreen();\n        }\n    },\n    closeBrowserFullScreen: function closeBrowserFullScreen() {\n        var isFullscreen = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;\n        if (isFullscreen) {\n            document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : \'\';\n        }\n    },\n    addFullscreenchangeListener: function addFullscreenchangeListener(callback) {\n        document.addEventListener("fullscreenchange", callback);\n        document.addEventListener("mozfullscreenchange", callback);\n        document.addEventListener("webkitfullscreenchange", callback);\n        document.addEventListener("msfullscreenchange", callback);\n    },\n    removeFullscreenchangeListener: function removeFullscreenchangeListener(callback) {\n        document.removeEventListener("fullscreenchange", callback);\n        document.removeEventListener("mozfullscreenchange", callback);\n        document.removeEventListener("webkitfullscreenchange", callback);\n        document.removeEventListener("msfullscreenchange", callback);\n    },\n    hideSlider: function hideSlider() {\n        document.documentElement.style.overflow = "hidden";\n        document.body.style.overlfow = \'hidden\';\n        document.documentElement.style.overflowY = \'hidden\';\n    },\n    unhideSlider: function unhideSlider() {\n        document.documentElement.style.overflow = "";\n        document.body.style.overlfow = "";\n        document.documentElement.style.overflowY = "";\n    },\n    hideControlBarTimeout: function hideControlBarTimeout() {\n        this.clearHideControlBarTimeout();\n        var that = this;\n        this.hideControlBarTimeoutID = setTimeout(function () {\n            that.controlsBar.style.opacity = 0;\n        }, 2000);\n    },\n    clearHideControlBarTimeout: function clearHideControlBarTimeout() {\n        clearTimeout(this.hideControlBarTimeoutID);\n    },\n    showControlBarLittleTime: function showControlBarLittleTime() {\n        this.controlsBar.style.opacity = 1;\n        this.hideControlBarTimeout();\n    },\n    hideVolumeDivTimeout: function hideVolumeDivTimeout() {\n        this.clearHideVolumeDivTimeout();\n        var that = this;\n        this.hideVolumeDivTimeoutID = setTimeout(function () {\n            that.volumeDiv.style.transition = "opacity 0.5s";\n            that.volumeDiv.style.opacity = "0";\n        }, 3000);\n    },\n    clearHideVolumeDivTimeout: function clearHideVolumeDivTimeout() {\n        clearTimeout(this.hideVolumeDivTimeout);\n    },\n    showVolumeDivLittleTime: function showVolumeDivLittleTime() {\n        this.volumeDiv.style.transition = "opacity 0s";\n        this.volumeDiv.style.opacity = "1";\n        this.hideVolumeDivTimeout();\n    },\n    addMousewheelListener: function addMousewheelListener(el, callback) {\n        el.addEventListener("DOMMouseScroll", callback);\n        el.addEventListener("mousewheel", callback);\n    },\n    removeMousewheelListener: function removeMousewheelListener(el, callback) {\n        el.removeEventListener("DOMMouseScroll", callback);\n        el.removeEventListener("mousewheel", callback);\n    }\n};\n\nfunction screenResizeControl(videoPlayer) {\n    var videoPlayerWarp = videoPlayer.getElementsByClassName("video-player-warp")[0];\n    this.screenResizeComputerModule = new screenResizeComputer(videoPlayerWarp);\n    this.screenResizeControl = videoPlayerWarp.getElementsByClassName("video-player-warp-controls")[0];\n    this.widescreenControl = this.screenResizeControl.getElementsByClassName("video-player-warp-controls-widescreen")[0];\n    this.widescreenModule = new wideScreenControl(this.widescreenControl);\n    this.fullscreenControl = this.screenResizeControl.getElementsByClassName("video-player-warp-controls-fullscreen")[0];\n    this.webfullScreenModule = new webfullScreenControl(this.fullscreenControl);\n    this.browserfullScreenModule = new browserfullscreenControl(this.fullscreenControl);\n    this.outputCallback = function () {};\n    this.readyCallbackList = [];\n    this.that = this;\n    this.run();\n}\nscreenResizeControl.prototype = {\n    run: function run() {\n        this.moduleConnect();\n    },\n    output: function output(outputSignal) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.screenResizeComputerModule.redrawUI();\n        this.widescreenModule.firstSetUI();\n        this.webfullScreenModule.firstSetUI();\n        this.browserfullScreenModule.firstSetUI();\n        this.ready("screenResizeControl");\n    },\n    ready: function ready(readyState) {\n        for (var i = 0; i < this.readyCallbackList.length; i++) {\n            this.readyCallbackList[i](readyState);\n        }\n    },\n    moduleConnect: function moduleConnect() {\n        var that = this;\n        var controlsOutputCallback = function controlsOutputCallback(outputSignal) {\n            that.screenResizeComputerModule.input(outputSignal);\n            that.output(outputSignal);\n        };\n        this.widescreenModule.outputCallback = controlsOutputCallback;\n        this.webfullScreenModule.outputCallback = controlsOutputCallback;\n        this.browserfullScreenModule.outputCallback = controlsOutputCallback;\n        var computerOutputCallback = function computerOutputCallback(outputSignal) {\n            switch (outputSignal) {\n                case "wideScreen-off":\n                    that.widescreenModule.input(outputSignal);\n                    break;\n                case "webfullScreen-off":\n                    that.webfullScreenModule.input(outputSignal);\n                    break;\n                case "browserfullScreen-off":\n                    that.browserfullScreenModule.input(outputSignal);\n                    break;\n            }\n        };\n        this.screenResizeComputerModule.outputCallback = computerOutputCallback;\n    }\n\n    // =============================================================================\n};function sendColorControl(sendColorControl) {\n    this.sendColorControl = sendColorControl;\n    this.colorBar = sendColorControl.getElementsByClassName("video-player-warp-sendbar-color-bar")[0];\n    this.colorCurrent = sendColorControl.getElementsByClassName("bilibili-player-color-picker-color-current")[0];\n    this.colorCode = sendColorControl.getElementsByClassName("bilibili-player-color-picker-color-code")[0];\n    this.inputWarn = sendColorControl.getElementsByClassName("bilibili-player-color-picker-warn")[0];\n    this.outputCallback = function () {};\n    this.defaultSetOutput = undefined;\n    this.setColorControlNameCallbackList = [];\n\n    this.run();\n}\nsendColorControl.prototype = {\n    getDefault: function getDefault() {\n        return this.defaultSetOutput;\n    },\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    input: function input(inputSignal //inputSignal="sendColorBarhide"\n    ) {\n        if (inputSignal == "sendColorBarClear") this.setColorControlName("clear");\n    },\n    output: function output(outputSignal //outputSignal="000000~ffffff"\n    ) {\n        this.setColorControlName("clear");\n        this.setSendColorControlBgColor("#" + outputSignal);\n        this.setColorCurrentBgColor("#" + outputSignal);\n        this.setColorCodeValue(outputSignal);\n        this.outputCallback("#" + outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        var colorCode = "FFFFFF";\n        this.setDefault("#" + colorCode);\n        this.setColorControlName("hide");\n        this.setInputWarnText("");\n        this.setSendColorControlBgColor("#" + colorCode);\n        this.setColorCurrentBgColor("#" + colorCode);\n        this.setColorCodeValue(colorCode);\n    },\n    setDefault: function setDefault(firstSetSignal //firstSetSignal="000000~ffffff"\n    ) {\n        this.defaultSetOutput = firstSetSignal;\n    },\n    eventInstall: function eventInstall() {\n        this.sendColorControlClick();\n        this.colorBarChildMousemoveDelegation();\n        this.colorBarChildClickDelegation();\n        this.colorCodeInput();\n    },\n    sendColorControlClick: function sendColorControlClick() {\n        var that = this;\n        var clickCallback = function clickCallback(event) {\n            var e = event || window.event;\n            var target = e.target;\n            if (target.id != "video-player-warp-sendbar-color") return;\n            var state = target.getAttribute("name");\n            switch (state) {\n                case "show":\n                    that.setColorControlName("hide");\n                    break;\n                case "hide":\n                case "clear":\n                    that.setColorControlName("show");\n                    that.checkUI();\n                    break;\n            }\n        };\n        this.sendColorControl.addEventListener("click", clickCallback);\n    },\n    checkUI: function checkUI() {\n        var colorCode = this.toColorHex(this.sendColorControl.style.backgroundColor).replace("#", "");\n        colorCode = colorCode.toUpperCase();\n        this.setColorCurrentBgColor("#" + colorCode);\n        this.setColorCodeValue(colorCode);\n    },\n    toColorHex: function toColorHex(colorString) {\n        var that = colorString;\n        if (/^(rgb|RGB)/.test(that)) {\n            var aColor = that.replace(/(?:\\(|\\)|rgb|RGB)*/g, "").split(",");\n            var strHex = "#";\n            for (var i = 0; i < aColor.length; i++) {\n                var hex = Number(aColor[i]).toString(16);\n                if (hex === "0") {\n                    hex += hex;\n                }\n                strHex += hex;\n            }\n            if (strHex.length !== 7) {\n                strHex = that;\n            }\n            return strHex;\n        } else if (reg.test(that)) {\n            var aNum = that.replace(/#/, "").split("");\n            if (aNum.length === 6) {\n                return that;\n            } else if (aNum.length === 3) {\n                var numHex = "#";\n                for (var i = 0; i < aNum.length; i += 1) {\n                    numHex += aNum[i] + aNum[i];\n                }\n                return numHex;\n            }\n        } else {\n            return that;\n        }\n    },\n    setColorControlName: function setColorControlName(signal) {\n        switch (signal) {\n            case "show":\n                this.addColorBarShowCallback();\n                this.sendColorControl.setAttribute("name", "show");\n                break;\n            case "hide":\n                this.removeColorBarShowCallback();\n                // this.colorBarNotshowCallback()\n                this.sendColorControl.setAttribute("name", "hide");\n                break;\n            case "clear":\n                this.removeColorBarShowCallback();\n                // this.colorBarNotshowCallback()\n                this.sendColorControl.setAttribute("name", "clear");\n                break;\n        }\n    },\n    addColorBarShowCallback: function addColorBarShowCallback() {\n        var that = this;\n        var sendColorControlClickCallback = function sendColorControlClickCallback(event) {\n            var e = event || window.event;\n            e.stopPropagation();\n            e.cancelBubble = true;\n        };\n        var bodyClickCallback = function bodyClickCallback(event) {\n            var e = event || window.event;\n            var target = e.target || e.srcElement;\n            if (target != that.sendColorControl) {\n                that.setColorControlName("clear");\n            }\n        };\n        document.body.addEventListener("click", bodyClickCallback);\n        this.sendColorControl.addEventListener("click", sendColorControlClickCallback);\n        this.setColorControlNameCallbackList.push(function () {\n            document.body.removeEventListener("click", bodyClickCallback);\n            that.sendColorControl.removeEventListener("click", sendColorControlClickCallback);\n        });\n    },\n    removeColorBarShowCallback: function removeColorBarShowCallback() {\n        this.setColorControlNameCallbackList.forEach(function (item) {\n            item();\n        });\n        this.setColorControlNameCallbackList = [];\n    },\n    colorBarChildMousemoveDelegation: function colorBarChildMousemoveDelegation() {\n        var that = this;\n        var mousemoveCallback = function mousemoveCallback(event) {\n            var e = event || window.event;\n            var target = e.target || e.srcElement;\n            if (target.getAttribute("name") != "color_picker") return;\n            var colorCode = target.getAttribute("data-color");\n            that.setColorCurrentBgColor("#" + colorCode);\n            that.setColorCodeValue(colorCode);\n        };\n        this.colorBar.addEventListener("mousemove", mousemoveCallback);\n    },\n    setColorCurrentBgColor: function setColorCurrentBgColor(sigenal //sigenal=#000000~#ffffff\n    ) {\n        this.colorCurrent.style.backgroundColor = sigenal;\n    },\n    setColorCodeValue: function setColorCodeValue(sigenal //sigenal=000000~ffffff\n    ) {\n        this.colorCode.value = sigenal;\n    },\n    colorBarChildClickDelegation: function colorBarChildClickDelegation() {\n        var that = this;\n        var clickCallback = function clickCallback(event) {\n            var e = event || window.event;\n            var target = e.target || e.srcElement;\n            if (target.getAttribute("name") != "color_picker") return;\n            var colorCode = target.getAttribute("data-color");\n            that.output(colorCode);\n        };\n        this.colorBar.addEventListener("click", clickCallback);\n    },\n    setSendColorControlBgColor: function setSendColorControlBgColor(sigenal //sigenal=#000000~#ffffff\n    ) {\n        this.sendColorControl.style.backgroundColor = sigenal;\n    },\n    colorCodeInput: function colorCodeInput() {\n        var that = this;\n        var keyupCallback = function keyupCallback(event) {\n            var e = event || window.event;\n            var keyCode = e.keyCode;\n            var target = e.target || e.srcElement;\n            var nowColorCodeValueLength = target.value.length;\n            if (keyCode == 13) {\n                var colorCode = "";\n                if (nowColorCodeValueLength == 3) {\n                    var value = target.value;\n                    for (var i = 0; i < 3; i++) {\n                        for (var l = 0; l < 2; l++) {\n                            colorCode += value[i];\n                        }\n                    }target.value = colorCode;\n                } else if (nowColorCodeValueLength == 6) colorCode = target.value;else {\n                    that.setInputWarnText("颜色代码3或6位");\n                    return;\n                }\n                that.setInputWarnText("");\n                that.output(colorCode);\n            } else if (keyCode < 48 || 57 < keyCode && keyCode < 65 || 70 < keyCode) {\n                target.value = target.value.replace(/[^abcdefABCDEF0123456]/, "");\n            }\n        };\n        this.colorCode.addEventListener("keyup", keyupCallback);\n        var inputCallback = function inputCallback(event) {\n            var e = event || window.event;\n            var target = e.target || e.srcElement;\n            target.value = target.value.toUpperCase();\n        };\n        this.colorCode.addEventListener("input", inputCallback);\n    },\n    setInputWarnText: function setInputWarnText(string) {\n        this.textChildVoluation(this.inputWarn, string);\n    },\n    textChildVoluation: function textChildVoluation(parentNode, textValue) {\n        if (parentNode.lastChild && parentNode.lastChild.nodeType == 3) parentNode.lastChild.nodeValue = textValue;else {\n            var newTextNode = document.createTextNode(textValue);\n            parentNode.appendChild(newTextNode);\n        }\n    }\n};\n\nfunction sendDanmuSizeControl(sendDanmuSizeControl) {\n    this.sendDanmuSizeControl = sendDanmuSizeControl;\n    this.sendDanmuSizeSelectionGroup = sendDanmuSizeControl.getElementsByClassName("video-player-warp-sendbar-fontsize-selection");\n    this.outputCallback = function () {};\n    this.defaultSetOutput = undefined;\n    this.run();\n}\nsendDanmuSizeControl.prototype = {\n    getDefault: function getDefault() {\n        return this.defaultSetOutput;\n    },\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    output: function output(outputSignal) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.drawUI("middle-size");\n        this.setDefault("middle-size");\n    },\n    setDefault: function setDefault(firstSetSignal //firstSetSignal="middle-size"||"small-size"\n    ) {\n        var defaultSlection = this.getSendDanmuSizeSelectionMember(firstSetSignal);\n        this.defaultSetOutput = defaultSlection.getAttribute("data-value");\n    },\n    getSendDanmuSizeSelectionMember: function getSendDanmuSizeSelectionMember(signal //signal="middle-size"||"small-size"\n    ) {\n        switch (signal) {\n            case "small-size":\n                return this.sendDanmuSizeSelectionGroup[0];\n            case "middle-size":\n                return this.sendDanmuSizeSelectionGroup[1];\n        }\n    },\n\n    drawUI: function drawUI(signal //signal="middle-size"||"small-size"\n    ) {\n        this.setDanmuSizeSelectionAttribute(signal);\n    },\n    setDanmuSizeSelectionAttribute: function setDanmuSizeSelectionAttribute(signal //signal="middle-size"||"small-size"\n    ) {\n        switch (signal) {\n            case "small-size":\n                this.sendDanmuSizeSelectionGroup[0].setAttribute("data-selected", "true");\n                this.sendDanmuSizeSelectionGroup[1].setAttribute("data-selected", "");\n                break;\n            case "middle-size":\n                this.sendDanmuSizeSelectionGroup[0].setAttribute("data-selected", "");\n                this.sendDanmuSizeSelectionGroup[1].setAttribute("data-selected", "true");\n                break;\n        }\n    },\n    eventInstall: function eventInstall() {\n        this.sendDanmuSizeControlClick();\n    },\n    sendDanmuSizeControlClick: function sendDanmuSizeControlClick() {\n        var that = this;\n        var clickCallback = function clickCallback(event) {\n            var e = event || window.event;\n            var target = e.target || e.srcElement;\n            if (target.getAttribute("data-id") != "video-player-warp-sendbar-fontsize-selection") return;\n            var state = target.getAttribute("data-selected");\n            if (state == "true") return;\n            var name = target.getAttribute("name");\n            switch (name) {\n                case "font-size-small":\n                    that.drawUI("small-size");\n                    break;\n                case "font-size-middle":\n                    that.drawUI("middle-size");\n                    break;\n            }\n            var outputSignal = target.getAttribute("data-value");\n            that.output(outputSignal);\n        };\n        this.sendDanmuSizeControl.addEventListener("click", clickCallback);\n    }\n};\n\nfunction sendDanmuModeControl(sendDanmuModeControl) {\n    this.sendDanmuModeControl = sendDanmuModeControl;\n    this.sendDanmuModeSelectionGroup = sendDanmuModeControl.getElementsByClassName("video-player-warp-sendbar-danmumode-selection");\n    this.outputCallback = function () {};\n    this.defaultSetOutput = undefined;\n    this.run();\n}\nsendDanmuModeControl.prototype = {\n    getDefault: function getDefault() {\n        return this.defaultSetOutput;\n    },\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    output: function output(outputSignal //outputSignal="danmu-movepos"||"danmu-fixedtop"||"danmu-fixedbottom"\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        this.drawUI("move-pose-mode");\n        this.setDefault("move-pose-mode");\n    },\n    drawUI: function drawUI(signal //signal="move-pose-mode"||"fixed-top-mode"||"fixed-bottom-mode"\n    ) {\n        this.setDanmuModeSelectionAttribute(signal);\n    },\n    setDefault: function setDefault(firstSetSignal //firstSetSignal="move-pose-mode"||"fixed-top-mode"||"fixed-bottom-mode"\n    ) {\n        var defaultSlection = this.getSendDanmuSizeSelectionMember(firstSetSignal);\n        var defaultSetOutput = void 0,\n            name = defaultSlection.getElementsByClassName("video-player-warp-sendbar-danmumode-selection-mode")[0].getAttribute("name");\n        switch (name) {\n            case "send-movepos-mode":\n                defaultSetOutput = "danmu-movepos";\n                break;\n            case "send-fixedtop-mode":\n                defaultSetOutput = "danmu-fixedtop";\n                break;\n            case "send-fixedbottom-mode":\n                defaultSetOutput = "danmu-fixedbottom";\n                break;\n\n        }\n        this.defaultSetOutput = defaultSetOutput;\n    },\n    getSendDanmuSizeSelectionMember: function getSendDanmuSizeSelectionMember(signal //signal="move-pose-mode"||"fixed-top-mode"||"fixed-bottom-mode"\n    ) {\n        switch (signal) {\n            case "move-pose-mode":\n                return this.sendDanmuModeSelectionGroup[0];\n            case "fixed-top-mode":\n                return this.sendDanmuModeSelectionGroup[1];\n            case "fixed-bottom-mode":\n                return this.sendDanmuModeSelectionGroup[2];\n        }\n    },\n\n    setDanmuModeSelectionAttribute: function setDanmuModeSelectionAttribute(signal //signal="move-pose-mode"||"fixed-top-mode"||"fixed-bottom-mode"\n    ) {\n        switch (signal) {\n            case "move-pose-mode":\n                this.sendDanmuModeSelectionGroup[0].setAttribute("data-selected", "true");\n                this.sendDanmuModeSelectionGroup[1].setAttribute("data-selected", "");\n                this.sendDanmuModeSelectionGroup[2].setAttribute("data-selected", "");\n                break;\n            case "fixed-top-mode":\n                this.sendDanmuModeSelectionGroup[0].setAttribute("data-selected", "");\n                this.sendDanmuModeSelectionGroup[1].setAttribute("data-selected", "true");\n                this.sendDanmuModeSelectionGroup[2].setAttribute("data-selected", "");\n                break;\n            case "fixed-bottom-mode":\n                this.sendDanmuModeSelectionGroup[0].setAttribute("data-selected", "");\n                this.sendDanmuModeSelectionGroup[1].setAttribute("data-selected", "");\n                this.sendDanmuModeSelectionGroup[2].setAttribute("data-selected", "true");\n                break;\n        }\n    },\n    eventInstall: function eventInstall() {\n        this.sendDanmuModeControlClick();\n    },\n    sendDanmuModeControlClick: function sendDanmuModeControlClick() {\n        var that = this;\n        var clickCallback = function clickCallback(event) {\n            var e = event || window.event;\n            var target = e.target || e.srcElement;\n            var userTarget = that.getEventUserTarget(target, function (el) {\n                if (el.getAttribute("data-id") == "video-player-warp-sendbar-danmumode-selection") return true;\n            });\n            if (!userTarget) return;\n            if (userTarget.getAttribute("data-id") != "video-player-warp-sendbar-danmumode-selection") return;\n            var state = userTarget.getAttribute("data-selected");\n\n            if (state == "true") return;\n\n            var outputSignal = void 0,\n                name = userTarget.getElementsByClassName("video-player-warp-sendbar-danmumode-selection-mode")[0].getAttribute("name");\n            switch (name) {\n                case "send-movepos-mode":\n                    that.drawUI("move-pose-mode");\n                    outputSignal = "danmu-movepos";\n                    break;\n                case "send-fixedtop-mode":\n                    that.drawUI("fixed-top-mode");\n                    outputSignal = "danmu-fixedtop";\n                    break;\n                case "send-fixedbottom-mode":\n                    that.drawUI("fixed-bottom-mode");\n                    outputSignal = "danmu-fixedbottom";\n                    break;\n\n            }\n            that.output(outputSignal);\n        };\n        this.sendDanmuModeControl.addEventListener("click", clickCallback);\n    },\n    getEventUserTarget: function getEventUserTarget(el, callback) {\n        if (!el.parentNode) return false;\n        if (callback(el)) return el;else return this.getEventUserTarget(el.parentNode, callback);\n    }\n};\n\nfunction sendChooseControl(sendChooseControl) {\n    this.sendChooseControl = sendChooseControl;\n    this.sendDanmuSizeModule = new sendDanmuSizeControl(sendChooseControl);\n    this.sendDanmuModeModule = new sendDanmuModeControl(sendChooseControl);\n    this.chooseBar = sendChooseControl.getElementsByClassName("video-player-warp-sendbar-choose-bar")[0];\n    this.setChooseControlNameCallbackList = [];\n    this.run();\n}\nsendChooseControl.prototype = {\n    run: function run() {\n        this.firstSetUI();\n        this.eventInstall();\n    },\n    firstSetUI: function firstSetUI(signal //signal="show"||"hide"||"clear"\n    ) {\n        this.drawUI("hide");\n    },\n    drawUI: function drawUI(signal //signal="show"||"hide"||"clear"\n    ) {\n        this.setChooseControlName(signal);\n    },\n    setChooseControlName: function setChooseControlName(signal) {\n        switch (signal) {\n            case "show":\n                this.addChooseBarShowCallback();\n                this.sendChooseControl.setAttribute("name", "show");\n                break;\n            case "hide":\n                this.removeChooseBarShowCallback();\n                this.sendChooseControl.setAttribute("name", "hide");\n                break;\n            case "clear":\n                this.removeChooseBarShowCallback();\n                this.sendChooseControl.setAttribute("name", "clear");\n                break;\n        }\n    },\n    addChooseBarShowCallback: function addChooseBarShowCallback() {\n        var that = this;\n        var sendChooseControlClickCallback = function sendChooseControlClickCallback(event) {\n            var e = event || window.event;\n            e.stopPropagation();\n            e.cancelBubble = true;\n        };\n        var bodyClickCallback = function bodyClickCallback(event) {\n            var e = event || window.event;\n            var target = e.target || e.srcElement;\n            if (target != that.sendChooseControl) {\n                that.drawUI("clear");\n            }\n        };\n        document.body.addEventListener("click", bodyClickCallback);\n        this.sendChooseControl.addEventListener("click", sendChooseControlClickCallback);\n        this.setChooseControlNameCallbackList.push(function () {\n            document.body.removeEventListener("click", bodyClickCallback);\n            that.sendChooseControl.removeEventListener("click", sendChooseControlClickCallback);\n        });\n    },\n    removeChooseBarShowCallback: function removeChooseBarShowCallback() {\n        this.setChooseControlNameCallbackList.forEach(function (item) {\n            item();\n        });\n        this.setChooseControlNameCallbackList = [];\n    },\n    eventInstall: function eventInstall() {\n        this.sendChooseControlClick();\n    },\n    sendChooseControlClick: function sendChooseControlClick() {\n        var that = this;\n        var clickCallback = function clickCallback(event) {\n            var e = event || window.event;\n            var target = e.target;\n            if (target.id != "video-player-warp-sendbar-choose") return;\n            var state = target.getAttribute("name");\n            switch (state) {\n                case "show":\n                    that.drawUI("hide");\n                    break;\n                case "hide":\n                case "clear":\n                    that.drawUI("show");\n                    break;\n            }\n        };\n        this.sendChooseControl.addEventListener("click", clickCallback);\n    }\n};\n\nfunction sendControl(videoPlayer) {\n    this.sendControlBar = videoPlayer.getElementsByClassName("video-player-warp-sendbar")[0];\n    this.videoDom = videoPlayer.getElementsByClassName("video-player-warp-main-video")[0];\n    this.sendChooseModule = new sendChooseControl(this.sendControlBar.getElementsByClassName("video-player-warp-sendbar-choose")[0]);\n    this.sendColorModule = new sendColorControl(this.sendControlBar.getElementsByClassName("video-player-warp-sendbar-color")[0]);\n    this.sendInputDom = this.sendControlBar.getElementsByClassName("video-player-warp-sendbar-input")[0];\n    this.sendSubmitDom = this.sendControlBar.getElementsByClassName("video-player-warp-sendbar-submit-button")[0];\n    this.danmuSize = "";\n    this.danmuMode = "";\n    this.danmuColor = "";\n    this.danmuContent = "";\n    this.danmuSendData = "";\n    this.videoCurrentTime = "";\n    this.outputCallback = function () {};\n    this.readyCallbackList = [];\n    this.run();\n}\nsendControl.prototype = {\n    ready: function ready(readyState) {\n        for (var i = 0; i < this.readyCallbackList.length; i++) {\n            this.readyCallbackList[i](readyState);\n        }\n    },\n    run: function run() {\n        this.firstSetUI();\n        this.moduleConnect();\n        this.eventInstall();\n    },\n    output: function output(outputSignal\n    // outputSignal={\n    //     content:"",\n    //     danmuSize:"",\n    //     danmuColor:"",\n    //     danmuMode:"",\n    //     currentTime:"",\n    //     sendTime:""\n    // }\n    ) {\n        this.outputCallback(outputSignal);\n    },\n    firstSetUI: function firstSetUI() {\n        var danmuSizeMudule = this.sendChooseModule.sendDanmuSizeModule;\n        var danmuModeMudule = this.sendChooseModule.sendDanmuModeModule;\n        var danmuColorMudule = this.sendColorModule;\n        danmuSizeMudule.firstSetUI();\n        danmuModeMudule.firstSetUI();\n        danmuColorMudule.firstSetUI();\n        this.danmuColor = danmuColorMudule.getDefault();\n        this.danmuSize = danmuSizeMudule.getDefault();\n        this.danmuMode = danmuModeMudule.getDefault();\n        this.ready("sendControl");\n    },\n    moduleConnect: function moduleConnect() {\n        this.danmuSizeConnectColorMudule();\n        this.danmuModeConnectColorMudule();\n        this.danmuColorConnectColorMudule();\n    },\n    danmuSizeConnectColorMudule: function danmuSizeConnectColorMudule() {\n        var that = this;\n        var danmuSizeMudule = this.sendChooseModule.sendDanmuSizeModule;\n        var danmuSizeMuduleOutputCallback = function danmuSizeMuduleOutputCallback(outputSignal //outputSignal="num"\n        ) {\n            that.danmuSize = outputSignal;\n        };\n        danmuSizeMudule.outputCallback = danmuSizeMuduleOutputCallback;\n    },\n    danmuModeConnectColorMudule: function danmuModeConnectColorMudule() {\n        var that = this;\n        var danmuModeMudule = this.sendChooseModule.sendDanmuModeModule;\n        var danmuModeMuduleOutputCallback = function danmuModeMuduleOutputCallback(outputSignal //outputSignal="danmu-movepos"||"danmu-fixedtop"||"danmu-fixedbottom"\n        ) {\n            that.danmuMode = outputSignal;\n        };\n        danmuModeMudule.outputCallback = danmuModeMuduleOutputCallback;\n    },\n    danmuColorConnectColorMudule: function danmuColorConnectColorMudule() {\n        var that = this;\n        var danmuColorMudule = this.sendColorModule;\n        var danmuColorMuduleOutputCallback = function danmuColorMuduleOutputCallback(outputSignal //outputSignal=#000000~#ffffff\n        ) {\n            that.danmuColor = outputSignal;\n        };\n        danmuColorMudule.outputCallback = danmuColorMuduleOutputCallback;\n    },\n    eventInstall: function eventInstall() {\n        this.sendSubmitDomClick();\n    },\n    sendSubmitDomClick: function sendSubmitDomClick() {\n        var that = this;\n        var clickCallback = function clickCallback() {\n            that.defineDanmuContent();\n            that.defineVideoCurrentTime();\n            that.defineDanmuSendData();\n            if (!that.danmuContent) {\n                that.showError("文本不能为空");\n                return;\n            }\n\n            if (that.videoCurrentTime === undefined) {\n                that.showError("获取视频属性出错");\n                return;\n            }\n            that.sendInputDom.value = "";\n            var danmuMode = void 0;\n            switch (that.danmuMode) {\n                case "danmu-movepos":\n                    danmuMode = "1";\n                    break;\n                case "danmu-fixedtop":\n                    danmuMode = "5";\n                    break;\n                case "danmu-fixedbottom":\n                    danmuMode = "4";\n                    break;\n            }\n            var outputSignal = {\n                danmuSize: that.danmuSize,\n                danmuMode: danmuMode,\n                danmuColor: that.danmuColor,\n                content: that.danmuContent,\n                sendTime: that.danmuSendData,\n                currentTime: that.videoCurrentTime\n            };\n            that.output(outputSignal);\n            that.showSuccess("弹幕发送成功");\n        };\n        this.sendSubmitDom.addEventListener("click", clickCallback);\n    },\n    defineDanmuContent: function defineDanmuContent() {\n        this.danmuContent = /^[\\s]*$/.test(this.sendInputDom.value) ? undefined : this.sendInputDom.value;\n    },\n    defineVideoCurrentTime: function defineVideoCurrentTime() {\n        try {\n            this.videoCurrentTime = this.videoDom.currentTime;\n        } catch (e) {\n            this.videoCurrentTime = undefined;\n        }\n    },\n    defineDanmuSendData: function defineDanmuSendData() {\n        var now = new Date();\n        var mouth = this.padNumber(now.getMonth() + 1, 2);\n        var day = this.padNumber(now.getDate(), 2);\n        var hours = this.padNumber(now.getHours(), 2);\n        var minutes = this.padNumber(now.getMinutes(), 2);\n        this.danmuSendData = mouth + "-" + day + " " + hours + ":" + minutes;\n    },\n    padNumber: function padNumber(num, fill) {\n        var len = (\'\' + num).length;\n        return Array(fill > len ? fill - len + 1 || 0 : 0).join(0) + num;\n    },\n    showError: function showError(errorTxt) {\n        this.sendInputDom.value = errorTxt;\n        this.sendInputDom.style.color = "#ff0000";\n        var that = this;\n        var clickCallback = function clickCallback() {\n            that.sendInputDom.value = "";\n            that.sendInputDom.style.color = "";\n            that.sendInputDom.removeEventListener("click", clickCallback);\n        };\n        this.sendInputDom.addEventListener("click", clickCallback);\n    },\n    showSuccess: function showSuccess(errorTxt) {\n        this.sendInputDom.value = errorTxt;\n        this.sendInputDom.style.color = "#00a1d6";\n        var that = this;\n        var clickCallback = function clickCallback() {\n            that.sendInputDom.value = "";\n            that.sendInputDom.style.color = "";\n            that.sendInputDom.removeEventListener("click", clickCallback);\n        };\n        this.sendInputDom.addEventListener("click", clickCallback);\n    }\n\n};\nfunction controlsModule(videoPlayer) {\n    var _videoControls;\n\n    this.videoPlayer = videoPlayer;\n    this.videoControls = (_videoControls = {\n        playPauseControl: new playPauseModule(videoPlayer),\n        input: function input(inputSignal //inputSignal="play"||"pause"\n        ) {},\n        output: function output(outputSignal //outputSignal="play"||"pause"\n        ) {},\n        firstSetUI: function firstSetUI() {},\n        readyCallback: function readyCallback() {},\n        bufferedControl: new bufferedSlider(videoPlayer)\n    }, _defineProperty(_videoControls, "input", function input(inputSignal //inputSignal=0~1\n    ) {}), _defineProperty(_videoControls, "firstSetUI", function firstSetUI() {}), _defineProperty(_videoControls, "readyCallback", function readyCallback() {}), _defineProperty(_videoControls, "timesControl", new timesModule(videoPlayer)), _defineProperty(_videoControls, "input", function input(inputSignal //inputSignal=0~1\n    ) {}), _defineProperty(_videoControls, "output", function output(outputSignal //outputSignal=0~1\n    ) {}), _defineProperty(_videoControls, "firstSetUI", function firstSetUI() {}), _defineProperty(_videoControls, "readyCallback", function readyCallback() {}), _defineProperty(_videoControls, "volumeControl", new volumeModule(videoPlayer)), _defineProperty(_videoControls, "input", function input(inputSignal //inputSignal=0~1\n    ) {}), _defineProperty(_videoControls, "output", function output(outputSignal //outputSignal=0~1\n    ) {}), _defineProperty(_videoControls, "firstSetUI", function firstSetUI() {}), _defineProperty(_videoControls, "readyCallback", function readyCallback() {}), _defineProperty(_videoControls, "repeatControl", new repeatControl(videoPlayer)), _defineProperty(_videoControls, "input", function input(inputSignal //inputSignal="repeat-on"||"repeat-off"\n    ) {}), _defineProperty(_videoControls, "output", function output(outputSignal //outputSignal="repeat-on"||"repeat-off"\n    ) {}), _defineProperty(_videoControls, "firstSetUI", function firstSetUI() {}), _defineProperty(_videoControls, "readyCallback", function readyCallback() {}), _videoControls);\n    this.screenControl = new screenResizeControl(videoPlayer), this.danmuControl = new danmuShowSetting(videoPlayer), this.danmuControls = _defineProperty({\n        danmuSettingControl: this.danmuControl,\n        danmuOpacityControl: this.danmuControl.danmuShowOpacityModule,\n        input: function input(inputSignal //inputSignal=0~1\n        ) {},\n        output: function output(outputSignal //outputSignal=0~1\n        ) {},\n        danmuModeControl: this.danmuControl.danmuShowCleanModule\n    }, "output", function output(outputSignal //outputSignal={type:"fixed-top"||"fixed-bottom"||"move-pos",mode:"danmu-on"||"danmu-off"}\n    ) {});\n    this.sendControl = new sendControl(videoPlayer);\n}\nfunction canvasModule(videoPlayer) {\n    this.videoPlayer = videoPlayer;\n    this.videoElement = videoPlayer.getElementsByClassName("video-player-warp-main-video")[0];\n    this.canvasElement = videoPlayer.getElementsByClassName("video-player-warp-main-canvas")[0];\n    this.ctx = this.canvasElement.getContext("2d");\n    this.data = null;\n    this.dataIndex = undefined;\n    this.tempData = null;\n    // ===============|\n    //    setting     |\n    this.danmuOpacity = 1;\n    this.danmuMoveShow = true;\n    this.danmuTopShow = true;\n    this.danmuBottomShow = true;\n    this.danmuMargin = 10; //px\n    this.marginTop = 24;\n    this.showTime = 6; //s\n    this.danmuShadowBlur = 4;\n    this.sizeScope = 0;\n    //========= \n    this.previousCurrentTime = undefined;\n    this.clearTimeoutID = null;\n    this.cancelAnimationFrameID = null;\n    this.previousCurrentHeight = undefined;\n    this.windowChange = undefined;\n    this.readyCallbackList = [];\n    this.run();\n}\ncanvasModule.prototype = {\n    input: function input(inputSignal //inputSignal=data[]\n    ) {\n        this.reset();\n        this.data = inputSignal;\n    },\n    sendData: function sendData(sendSignal //sendSignal={\n    //     danmuContent:"",\n    //     danmuSize:"",\n    //     danmuColor:"",\n    //     danmuMode:"",\n    //     videoCurrentTime:"",\n    //     danmuSendData:"",\n    //     currentSend:true\n    // }\n    ) {\n        if (!this.tempData || !this.tempData.length) return;\n        var sendCurrentTime = parseFloat(sendSignal.currentTime.toFixed(3)) * 1000;\n        var firstData = this.data[0];\n        if (sendCurrentTime < parseFloat(firstData.currentTime.toFixed(3)) * 1000) {\n            this.data.unshift(sendSignal);\n            return;\n        }\n\n        var lastData = this.data[this.data.length - 1];\n        if (sendCurrentTime > parseFloat(lastData.currentTime.toFixed(3)) * 1000) {\n            this.data.push(sendSignal);\n            return;\n        }\n        for (var i = 0; i < this.data.length - 1; i++) {\n            var thisDataCurrentTime = parseFloat(this.data[i].currentTime.toFixed(3)) * 1000;\n            var nextDataCurrentTime = parseFloat(this.data[i + 1].currentTime.toFixed(3)) * 1000;\n            if (thisDataCurrentTime <= sendCurrentTime && sendCurrentTime <= nextDataCurrentTime) {\n                this.data.splice(i + 1, 0, sendSignal);\n                return;\n            }\n        }\n    },\n    ready: function ready(readyState) {\n        for (var i = 0; i < this.readyCallbackList.length; i++) {\n            this.readyCallbackList[i](readyState);\n        }\n    },\n    run: function run() {\n        this.eventInstall();\n    },\n    reset: function reset() {\n        this.stopDataFilter();\n        this.pauseAnimation();\n        this.clean();\n        this.resetCanvasOpacity();\n        this.danmuOpacity = 1;\n        this.danmuMoveShow = true;\n        this.danmuTopShow = true;\n        this.danmuBottomShow = true;\n\n        this.dataIndex = undefined;\n        this.tempData = null;\n        this.previousCurrentTime = undefined;\n        this.clearTimeoutID = null;\n        this.cancelAnimationFrameID = null;\n        this.previousCurrentHeight = undefined;\n        this.windowChange = undefined;\n        this.ready("canvasModule");\n    },\n    play: function play() {\n        this.runningDataFilter();\n        this.playingAnimation();\n    },\n    pause: function pause() {\n        this.stopDataFilter();\n        this.pauseAnimation();\n    },\n    playingAnimation: function playingAnimation() {\n        cancelAnimationFrame(this.cancelAnimationFrameID);\n        this.draw();\n        var that = this;\n        this.cancelAnimationFrameID = requestAnimationFrame(function () {\n            that.playingAnimation();\n        });\n    },\n    pauseAnimation: function pauseAnimation() {\n        cancelAnimationFrame(this.cancelAnimationFrameID);\n    },\n    clean: function clean() {\n        var currentWidth = this.getCancasCurrentWidth();\n        var currentHeight = this.getCancasCurrentHeight();\n        this.ctx.clearRect(0, 0, currentWidth, currentHeight);\n    },\n\n    draw: function draw() {\n        if (!this.tempData) return;\n        var that = this;\n        if (this.draw_cancelAnimationFrameID) return;\n        this.draw_cancelAnimationFrameID = requestAnimationFrame(function () {\n            that.animationFrame();\n            that.draw_cancelAnimationFrameID = false;\n        });\n    },\n    animationFrame: function animationFrame() {\n        this.setCanvasSize();\n        this.setCanvasOpacity();\n        var videoCurrentTime = this.videoElement.currentTime;\n        var currentWidth = this.getCancasCurrentWidth();\n        var currentHeight = this.getCancasCurrentHeight();\n        var ctx = this.ctx;\n        ctx.clearRect(0, 0, currentWidth, currentHeight);\n        var moveHeightSpaceArr = [[{ footerY: this.marginTop }, { headerY: currentHeight }]];\n        var topHeightSpaceArr = [[{ footerY: this.marginTop }, { headerY: currentHeight }]];\n        var bottomHeightSpaceArr = [[{ footerY: 0 }, { headerY: currentHeight - this.marginTop }]];\n        var tempData = this.tempData;\n        if (!tempData) return;\n        var showTime = this.showTime;\n        this.windowChange = currentHeight - this.previousCurrentHeight;\n        this.previousCurrentHeight = currentHeight;\n        var danmuMoveShow = this.danmuMoveShow;\n        var danmuTopShow = this.danmuTopShow;\n        var danmuBottomShow = this.danmuBottomShow;\n        for (var l = 0; l < 3; l++) {\n            if (l == 0 && danmuMoveShow == false) continue;\n            if (l == 1 && danmuTopShow == false) continue;\n            if (l == 2 && danmuBottomShow == false) continue;\n            for (var i = 0; i < tempData.length; i++) {\n                var danmu = tempData[i];\n                var mode = danmu.danmuMode;\n                var posX = void 0,\n                    posY = void 0;\n                var size = danmu.danmuSize;\n                ctx.font = "normal normal 600 " + (parseInt(size) + this.sizeScope) + "px 微软雅黑";\n                switch (mode) {\n                    case "1":case "2":case "3":\n                        if (l != 0) break;\n                        var currentTime = danmu.currentTime;\n                        posX = this.movePosXcomputer(danmu, videoCurrentTime);\n                        posY = this.movePosYcomputer(danmu, moveHeightSpaceArr, currentHeight, videoCurrentTime);\n                        break;\n                    case "4":\n                        if (l != 2) break;\n                        posX = this.topPosXcomputer(danmu);\n                        posY = currentHeight - this.topPosYcomputer(danmu, bottomHeightSpaceArr, currentHeight);\n                        break;\n                    case "5":\n                        if (l != 1) break;\n                        posX = this.topPosXcomputer(danmu);\n                        posY = this.topPosYcomputer(danmu, topHeightSpaceArr, currentHeight);\n                        break;\n                }\n                if (posX !== undefined && posY !== undefined) {\n                    var content = danmu.content;\n                    var color = danmu.danmuColor;\n                    if (danmu.currentSend == true) {\n                        var padding = 4;\n                        var danmuWidth = this.getDanmuWidth(danmu);\n                        var danmuHeight = parseInt(danmu.danmuSize);\n                        ctx.fillStyle = "#FFFFFF";\n                        ctx.fillRect(posX - padding, posY - danmuHeight, danmuWidth + 2 * padding, danmuHeight + 2 * padding);\n                        ctx.beginPath();\n                        ctx.lineWidth = "1";\n                        ctx.strokeStyle = "#ff0000";\n                        ctx.rect(posX - padding, posY - danmuHeight, danmuWidth + 2 * padding, danmuHeight + 2 * padding);\n                        ctx.stroke();\n                    }\n                    ctx.fillStyle = color;\n                    ctx.shadowOffsetX = 0;\n                    ctx.shadowOffsetY = 0;\n                    ctx.shadowBlur = this.danmuShadowBlur;\n                    ctx.shadowColor = "#000000";\n                    ctx.fillText(content, posX, posY);\n                }\n            }\n        }\n    },\n    setCanvasOpacity: function setCanvasOpacity() {\n        this.canvasElement.style.opacity = this.danmuOpacity;\n    },\n    resetCanvasOpacity: function resetCanvasOpacity() {\n        this.canvasElement.style.opacity = "";\n    },\n    topPosXcomputer: function topPosXcomputer(danmu) {\n        var canvasWidth = this.getCancasCurrentWidth();\n        var danmuWidth = this.getDanmuWidth(danmu);\n        return canvasWidth / 2 - danmuWidth / 2;\n    },\n    topPosYcomputer: function topPosYcomputer(danmu, heightSpaceArr, spaceHeight) {\n        var danmuHeight = parseInt(danmu.danmuSize);\n        var danmuHoldHeight = danmuHeight + this.danmuMargin;\n        var spaceHeightGreater = false;\n        if (danmu.posY + this.danmuMargin > spaceHeight) {\n            // console.log(danmu.content)\n            delete danmu.posY;\n        }\n        // if(heightSpaceArr.length>1&&heightSpaceArr.length[heightSpaceArr.length-2].headerY)\n        for (var i = 0; i < heightSpaceArr.length; i++) {\n            var heightSpace = heightSpaceArr[i];\n            for (var _i = 0; _i < heightSpace.length - 1; _i++) {\n                var currentSpaceholder = heightSpace[_i];\n                var nextSpaceholder = heightSpace[_i + 1];\n                if (danmu.posY) {\n                    var _posY = danmu.posY;\n                    var _insertObj = {\n                        posY: _posY,\n                        headerY: _posY - danmuHeight,\n                        footerY: _posY + this.danmuMargin,\n                        target: danmu\n                    };\n                    if (currentSpaceholder.footerY <= _insertObj.headerY && _insertObj.footerY <= nextSpaceholder.headerY) {\n                        heightSpace.splice(_i + 1, 0, _insertObj);\n                        return danmu.posY;\n                    }\n                } else {\n                    if (nextSpaceholder.headerY - currentSpaceholder.footerY >= danmuHoldHeight) {\n                        var _posY2 = currentSpaceholder.footerY + danmuHeight;\n                        var _insertObj2 = {\n                            posY: _posY2,\n                            headerY: _posY2 - danmuHeight,\n                            footerY: _posY2 + this.danmuMargin,\n                            target: danmu\n                        };\n                        heightSpace.splice(_i + 1, 0, _insertObj2);\n                        danmu.posY = _posY2;\n                        return _insertObj2.posY;\n                    }\n                }\n            }\n        }\n        if (danmu.posY && this.windowChange > 0) {\n            for (var _i2 = 0; _i2 < heightSpaceArr.length; _i2++) {\n                var _heightSpace = heightSpaceArr[_i2];\n                var lastHolder = _heightSpace[_heightSpace.length - 1];\n                var highestHolder = _heightSpace[_heightSpace.length - 2];\n                if (lastHolder.headerY - highestHolder.footerY < danmuHeight) continue;\n                for (var _i3 = 0; _i3 < _heightSpace.length - 1; _i3++) {\n                    var _currentSpaceholder = _heightSpace[_i3];\n                    var _nextSpaceholder = _heightSpace[_i3 + 1];\n                    if (_nextSpaceholder.headerY - _currentSpaceholder.footerY >= danmuHoldHeight) {\n                        var _posY3 = _currentSpaceholder.footerY + danmuHeight;\n                        var _insertObj3 = {\n                            posY: _posY3,\n                            headerY: _posY3 - danmuHeight,\n                            footerY: _posY3 + this.danmuMargin,\n                            target: danmu\n                        };\n                        _heightSpace.splice(_i3 + 1, 0, _insertObj3);\n                        danmu.posY = _posY3;\n                        return _insertObj3.posY;\n                    }\n                }\n            }\n        }\n        if (danmu.posY) {\n            var _posY4 = danmu.posY;\n            var _insertObj4 = {\n                posY: _posY4,\n                headerY: _posY4 - danmuHeight,\n                footerY: _posY4 + this.danmuMargin,\n                target: danmu\n            };\n            heightSpaceArr.push([heightSpaceArr[0][0], _insertObj4, heightSpaceArr[0][heightSpaceArr[0].length - 1]]);\n            return _insertObj4.posY;\n        }\n        var posY = this.marginTop + danmuHeight;\n        var insertObj = {\n            posY: posY,\n            headerY: posY - danmuHeight,\n            footerY: posY + this.danmuMargin,\n            target: danmu\n        };\n        heightSpaceArr.push([heightSpaceArr[0][0], insertObj, heightSpaceArr[0][heightSpaceArr[0].length - 1]]);\n        return insertObj.posY;\n    },\n    setCanvasSize: function setCanvasSize() {\n        this.canvasElement.setAttribute("width", this.getCancasCurrentWidth());\n        this.canvasElement.setAttribute("height", this.getCancasCurrentHeight());\n    },\n    getDanmuWidth: function getDanmuWidth(danmu) {\n        var ctx = this.ctx;\n        var content = danmu.content;\n        return ctx.measureText(content).width;\n    },\n    getPosXspeed: function getPosXspeed(danmu) {\n        var canvasWidth = this.getCancasCurrentWidth();\n        var danmuWidth = this.getDanmuWidth(danmu);\n        return (danmuWidth + canvasWidth) / this.showTime;\n    },\n    movePosXcomputer: function movePosXcomputer(danmu, videoCurrentTime) {\n        var currentTime = danmu.currentTime;\n        var speed = this.getPosXspeed(danmu);\n        var canvasWidth = this.getCancasCurrentWidth();\n        return canvasWidth - (videoCurrentTime * 1000 - currentTime * 1000) / 1000 * speed;\n    },\n    getMarginLeftPosX: function getMarginLeftPosX(danmu, videoCurrentTime) {\n        var danmuWidth = this.getDanmuWidth(danmu);\n        var currentTime = danmu.currentTime;\n        var danmuPosX = this.movePosXcomputer(danmu, videoCurrentTime);\n        // console.log((1-(videoCurrentTime*1000-currentTime*1000)/(this.showTime*1000)))\n        // return danmuPosX-danmuWidth\n        return danmuPosX - danmuWidth * (1 - (videoCurrentTime * 1000 - currentTime * 1000) / (this.showTime * 1000));\n    },\n    getRightPosX: function getRightPosX(danmu, videoCurrentTime) {\n        var danmuWidth = this.getDanmuWidth(danmu);\n        var danmuPosX = this.movePosXcomputer(danmu, videoCurrentTime);\n        return danmuPosX + danmuWidth;\n    },\n    movePosYcomputer: function movePosYcomputer(danmu, heightSpaceArr, spaceHeight, videoCurrentTime) {\n        var danmuHeight = parseInt(danmu.danmuSize);\n        var danmuHoldHeight = danmuHeight + this.danmuMargin;\n        var spaceHeightGreater = false;\n        if (danmu.posY + this.danmuMargin > spaceHeight) {\n            delete danmu.posY;\n        }\n        for (var i = 0; i < heightSpaceArr.length; i++) {\n            var heightSpace = heightSpaceArr[i];\n            for (var _i4 = 0; _i4 < heightSpace.length - 1; _i4++) {\n                var currentSpaceholder = heightSpace[_i4];\n                var nextSpaceholder = heightSpace[_i4 + 1];\n                if (danmu.posY) {\n                    var _posY5 = danmu.posY;\n                    var _insertObj5 = {\n                        posY: _posY5,\n                        headerY: _posY5 - danmuHeight,\n                        footerY: _posY5 + this.danmuMargin,\n                        target: danmu\n                    };\n                    if (_i4 != 0) {\n                        if (currentSpaceholder.headerY <= _insertObj5.headerY && _insertObj5.footerY <= currentSpaceholder.footerY) {\n                            var holderRightPosX = this.getRightPosX(currentSpaceholder.target, videoCurrentTime);\n                            var insertMarginLeftPosX = this.getMarginLeftPosX(_insertObj5.target, videoCurrentTime);\n                            if (holderRightPosX <= insertMarginLeftPosX) {\n\n                                heightSpace.splice(_i4, 1);\n                                heightSpace.splice(_i4, 0, _insertObj5);\n                                return danmu.posY;\n                            }\n                        }\n                    }\n                    if (_i4 != 0 && _i4 + 1 != heightSpace.length - 1) {\n                        if (currentSpaceholder.headerY <= _insertObj5.headerY && _insertObj5.footerY <= nextSpaceholder.footerY) {\n                            var currentHolderRightPosX = this.getRightPosX(currentSpaceholder.target, videoCurrentTime);\n                            var nextHolderRightPosX = this.getRightPosX(nextSpaceholder.target, videoCurrentTime);\n                            var _insertMarginLeftPosX = this.getMarginLeftPosX(_insertObj5.target, videoCurrentTime);\n                            if (currentHolderRightPosX <= _insertMarginLeftPosX && nextHolderRightPosX <= _insertMarginLeftPosX) {\n\n                                // console.log(currentSpaceholder.target.content+"  |  "+nextSpaceholder.target.content+"  |  "+insertObj.target.content)\n                                heightSpace.splice(_i4, 2);\n                                heightSpace.splice(_i4, 0, _insertObj5);\n                                return danmu.posY;\n                            }\n                        }\n                    }\n                    if (currentSpaceholder.footerY <= _insertObj5.headerY && _insertObj5.footerY <= nextSpaceholder.headerY) {\n\n                        heightSpace.splice(_i4 + 1, 0, _insertObj5);\n                        return danmu.posY;\n                    }\n                } else {\n                    // console.log(danmu.posY+" || "+danmu.content)\n                    if (_i4 != 0) {\n                        if (currentSpaceholder.footerY - currentSpaceholder.headerY >= danmuHoldHeight) {\n                            var _holderRightPosX = this.getRightPosX(currentSpaceholder.target, videoCurrentTime);\n                            var _insertMarginLeftPosX2 = this.getMarginLeftPosX(danmu, videoCurrentTime);\n                            if (_holderRightPosX <= _insertMarginLeftPosX2) {\n                                var _posY6 = currentSpaceholder.headerY + danmuHeight;\n                                var _insertObj6 = {\n                                    posY: _posY6,\n                                    headerY: _posY6 - danmuHeight,\n                                    footerY: _posY6 + this.danmuMargin,\n                                    target: danmu\n                                };\n                                heightSpace.splice(_i4, 1);\n                                heightSpace.splice(_i4, 0, _insertObj6);\n                                danmu.posY = _posY6;\n                                return _posY6;\n                            }\n                        }\n                    }\n                    if (_i4 != 0 && _i4 + 1 != heightSpace.length - 1) {\n                        if (nextSpaceholder.footerY - currentSpaceholder.headerY >= danmuHoldHeight) {\n                            var _currentHolderRightPosX = this.getRightPosX(currentSpaceholder.target, videoCurrentTime);\n                            var _nextHolderRightPosX = this.getRightPosX(nextSpaceholder.target, videoCurrentTime);\n                            var _insertMarginLeftPosX3 = this.getMarginLeftPosX(danmu, videoCurrentTime);\n                            if (_currentHolderRightPosX <= _insertMarginLeftPosX3 && _nextHolderRightPosX <= _insertMarginLeftPosX3) {\n                                var _posY7 = currentSpaceholder.headerY + danmuHeight;\n                                var _insertObj7 = {\n                                    posY: _posY7,\n                                    headerY: _posY7 - danmuHeight,\n                                    footerY: _posY7 + this.danmuMargin,\n                                    target: danmu\n                                };\n                                heightSpace.splice(_i4, 2);\n                                heightSpace.splice(_i4, 0, _insertObj7);\n                                danmu.posY = _posY7;\n                                return _posY7;\n                            }\n                        }\n                    }\n                    if (nextSpaceholder.headerY - currentSpaceholder.footerY >= danmuHoldHeight) {\n                        var _posY8 = currentSpaceholder.footerY + danmuHeight;\n                        var _insertObj8 = {\n                            posY: _posY8,\n                            headerY: _posY8 - danmuHeight,\n                            footerY: _posY8 + this.danmuMargin,\n                            target: danmu\n                        };\n                        heightSpace.splice(_i4 + 1, 0, _insertObj8);\n                        danmu.posY = _posY8;\n                        // console.log(posY,spaceHeight)\n                        return _insertObj8.posY;\n                    }\n                }\n            }\n        }\n        if (danmu.posY && this.windowChange > 0) {\n            for (var _i5 = 0; _i5 < heightSpaceArr.length; _i5++) {\n                var _heightSpace2 = heightSpaceArr[_i5];\n                var lastHolder = _heightSpace2[_heightSpace2.length - 1];\n                var highestHolder = _heightSpace2[_heightSpace2.length - 2];\n                if (lastHolder.headerY - highestHolder.footerY < danmuHeight) continue;\n                for (var _i6 = 0; _i6 < _heightSpace2.length - 1; _i6++) {\n                    var _currentSpaceholder2 = _heightSpace2[_i6];\n                    var _nextSpaceholder2 = _heightSpace2[_i6 + 1];\n                    if (_nextSpaceholder2.headerY - _currentSpaceholder2.footerY >= danmuHoldHeight) {\n                        var _posY9 = _currentSpaceholder2.footerY + danmuHeight;\n                        var _insertObj9 = {\n                            posY: _posY9,\n                            headerY: _posY9 - danmuHeight,\n                            footerY: _posY9 + this.danmuMargin,\n                            target: danmu\n                        };\n                        _heightSpace2.splice(_i6 + 1, 0, _insertObj9);\n                        danmu.posY = _posY9;\n                        // console.log(posY,spaceHeight)\n                        return _insertObj9.posY;\n                    }\n                }\n            }\n        }\n        if (danmu.posY) {\n            var _posY10 = danmu.posY;\n            var _insertObj10 = {\n                posY: _posY10,\n                headerY: _posY10 - danmuHeight,\n                footerY: _posY10 + this.danmuMargin,\n                target: danmu\n            };\n            heightSpaceArr.push([heightSpaceArr[0][0], _insertObj10, heightSpaceArr[0][heightSpaceArr[0].length - 1]]);\n            // console.log("new posY")\n            return _insertObj10.posY;\n        }\n        var posY = this.marginTop + danmuHeight;\n        var insertObj = {\n            posY: posY,\n            headerY: posY - danmuHeight,\n            footerY: posY + this.danmuMargin,\n            target: danmu\n        };\n        heightSpaceArr.push([heightSpaceArr[0][0], insertObj, heightSpaceArr[0][heightSpaceArr[0].length - 1]]);\n        // console.log("new")\n        return insertObj.posY;\n    },\n    getCancasCurrentWidth: function getCancasCurrentWidth() {\n        return this.canvasElement.offsetWidth;\n    },\n    getCancasCurrentHeight: function getCancasCurrentHeight() {\n        return this.canvasElement.offsetHeight;\n    },\n    runningDataFilter: function runningDataFilter() {\n        clearTimeout(this.clearTimeoutID);\n        var videoCurrentTime = this.videoElement.currentTime;\n        this.dataFilter(videoCurrentTime);\n        var that = this;\n        this.clearTimeoutID = setTimeout(function () {\n            that.runningDataFilter();\n        }, 0);\n    },\n    stopDataFilter: function stopDataFilter() {\n        clearTimeout(this.clearTimeoutID);\n    },\n    dataFilter: function dataFilter(videoCurrentTime) {\n        this.pushTempData(videoCurrentTime);\n        this.shiftTempData(videoCurrentTime);\n    },\n    pushTempData: function pushTempData(currentTime) {\n        currentTime = currentTime.toFixed(3) * 1000;\n        if (!this.data) return;\n        if (!this.tempData) this.tempData = [];\n        if (!this.dataIndex) this.dataIndex = 0;\n        if (!this.previousCurrentTime) this.previousCurrentTime = 0;\n        if (this.previousCurrentTime > currentTime) {\n            this.dataIndex = 0;\n            this.previousCurrentTime = 0;\n            this.tempData = [];\n        } else this.previousCurrentTime = currentTime;\n        var dataCurrentTime = this.data[this.dataIndex].currentTime * 1000;\n        var deleteTime = currentTime - this.showTime * 1000;\n        var previousLowerCurrentTimeIndex = undefined;\n        while (this.dataIndex < this.data.length - 1) {\n            var _dataCurrentTime = this.data[this.dataIndex].currentTime * 1000;\n            if (_dataCurrentTime < deleteTime) {\n                if (this.data[this.dataIndex].currentSend) {\n                    delete this.data[this.dataIndex].currentSend;\n                }\n                ++this.dataIndex;\n            } else if (deleteTime <= _dataCurrentTime && _dataCurrentTime <= currentTime) {\n                var str = JSON.stringify(this.data[this.dataIndex]);\n                var newObj = JSON.parse(str);\n                this.tempData.push(newObj);\n                ++this.dataIndex;\n            } else {\n                if (this.data[this.dataIndex].currentSend) {\n                    delete this.data[this.dataIndex].currentSend;\n                }\n                break;\n            }\n        }\n    },\n    shiftTempData: function shiftTempData(currentTime) {\n        if (!this.tempData || !this.tempData.length) return;\n        currentTime = currentTime.toFixed(3) * 1000;\n        var deleteTime = currentTime - this.showTime * 1000;\n        var tempDataCopy = this.tempData.slice(0);\n        for (var i = 0; i < this.tempData.length; i++) {\n            var dataCurrentTime = this.tempData[i].currentTime * 1000;\n            if (dataCurrentTime < deleteTime) tempDataCopy.shift();else break;\n        }\n        this.tempData = tempDataCopy;\n    },\n    eventInstall: function eventInstall() {\n        this.windowResize();\n    },\n    windowResize: function windowResize() {\n        var previousCanvasHeight = this.canvasElement.clientHeight;\n        var that = this;\n        var clearTimeoutID = null;\n        var resizeCallback = function resizeCallback() {\n            var currentCanvasHeight = that.canvasElement.clientHeight;\n            that.windowChange = currentCanvasHeight - previousCanvasHeight;\n            clearTimeout(clearTimeoutID);\n            clearTimeoutID = setTimeout(function () {\n                that.windowChange = 0;\n            }, 400);\n        };\n        window.addEventListener("resize", resizeCallback);\n    }\n};\nfunction getDanmuXml() {\n    this.XMLHttpRequestObj = null;\n    this.outputCallback = function () {};\n    this.run();\n}\ngetDanmuXml.prototype = {\n    input: function input(XMLurlv) {\n        this.XMLHttpRequestObj.open("GET", XMLurlv, true);\n        this.XMLHttpRequestObj.send();\n    },\n    output: function output(XMLdata) {\n        this.outputCallback(XMLdata);\n    },\n    run: function run() {\n        this.getXMLHttpRequest();\n        this.eventInstall();\n    },\n    getXMLHttpRequest: function getXMLHttpRequest() {\n        var XMLHttpRequestObj = void 0;\n        if (window.XMLHttpRequest) {\n            //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码\n            XMLHttpRequestObj = new XMLHttpRequest();\n        } else {\n            // IE6, IE5 浏览器执行代码\n            XMLHttpRequestObj = new ActiveXObject("Microsoft.XMLHTTP");\n        }\n        this.XMLHttpRequestObj = XMLHttpRequestObj;\n    },\n    eventInstall: function eventInstall() {\n        this.XMLHttpRequestObjReadystatechange();\n    },\n    XMLHttpRequestObjReadystatechange: function XMLHttpRequestObjReadystatechange() {\n        var that = this;\n        var requestReadystatechange = function requestReadystatechange() {\n            var XMLHttpRequestObj = that.XMLHttpRequestObj;\n            if (XMLHttpRequestObj.readyState == 4 && XMLHttpRequestObj.status == 200) {\n                var XMLdocument = XMLHttpRequestObj.responseXML.documentElement;\n                var XMLdata = that.XML2Json(XMLdocument);\n                that.output(XMLdata);\n            }\n        };\n        this.XMLHttpRequestObj.addEventListener("readystatechange", requestReadystatechange);\n    },\n    XML2Json: function XML2Json(XMLdocument) {\n        var dataDom = XMLdocument.getElementsByTagName("d");\n        var dataList = [];\n        var padNumber = function padNumber(num, fill) {\n            var len = (\'\' + num).length;\n            return Array(fill > len ? fill - len + 1 || 0 : 0).join(0) + num;\n        };\n        for (var i = 0; i < dataDom.length; i++) {\n            var data = {};\n            if (!dataDom[i].firstChild && /^\\s*$/.test(dataDom[i].firstChild.nodeValue)) return;\n            data.content = dataDom[i].firstChild.nodeValue;\n            var dataString = dataDom[i].getAttribute("p");\n            var dataArr = dataString.split(",");\n            data.currentTime = parseFloat(dataArr[0]);\n            if (parseInt(dataArr[1]) > 5) continue;\n            data.danmuMode = dataArr[1];\n            data.danmuSize = dataArr[2];\n            data.danmuColor = "#" + padNumber(parseInt(dataArr[3]).toString(16), 6);\n            var date = new Date();\n            date.setTime(parseInt(dataArr[4]) * 1000);\n            data.sendTime = padNumber(date.getMonth() + 1, 2) + "-" + padNumber(date.getDate(), 2) + " " + padNumber(date.getHours(), 2) + ":" + padNumber(date.getMinutes(), 2);\n            dataList.push(data);\n        }\n        dataList.sort(function (a, b) {\n            return parseFloat(a.currentTime) - parseFloat(b.currentTime);\n        });\n        return dataList;\n    }\n};\nfunction readyState(videoPlayer) {\n    var readyStateWrap = videoPlayer.getElementsByClassName("video-player-readystate-wrap")[0];\n    this.readyStateWrap = readyStateWrap;\n    this.stateProgressPercent = readyStateWrap.getElementsByClassName("video-player-readystate-body-cover-progress")[0];\n    this.stateGroupsParent = readyStateWrap.getElementsByClassName("video-player-readystate-body-message-groups-ol")[0];\n    this.stateMembersParent = readyStateWrap.getElementsByClassName("video-player-readystate-body-message-members-ol")[0];\n    this.clearTimeoutID = null;\n    this.cancelAnimationFrameID = null;\n    this.previousProgressPercent = undefined;\n    this.startState = false;\n}\nreadyState.prototype = {\n    start: function start() {\n        this.startState = true;\n    },\n    stop: function stop() {\n        this.startState = false;\n    },\n    input: function input(inputSignal //inputSignal={\n    //     groupName:"",\n    //     groupRank:num,\n    //     groupNum:num,\n    //     memberName:"",\n    //     memberRank:num,\n    //     memberNum:num\n    // }\n    ) {\n        if (!this.startState) return;\n        var progressPercent = 1 / inputSignal.groupNum * (inputSignal.memberRank / inputSignal.memberNum) + (inputSignal.groupRank - 1) / inputSignal.groupNum;\n\n        if (progressPercent <= this.previousProgressPercent) {\n            this.reset();\n        }\n        this.previousProgressPercent = progressPercent;\n        this.transitionStateProgressPercentNum((progressPercent * 100).toFixed(0));\n        this.writeStateGroupsList(inputSignal.groupName, inputSignal.groupNum == inputSignal.groupRank);\n        this.writeStateMembersList(inputSignal.memberName);\n    },\n    transitionStateProgressPercentNum: function transitionStateProgressPercentNum(progressPercent) {\n        var that = this;\n        var stateProgressPercent = this.stateProgressPercent;\n        if (!progressPercent.lastChild) this.textChildVoluation(stateProgressPercent, 0);\n        var animationFrame = function animationFrame() {\n            cancelAnimationFrame(that.cancelAnimationFrameID);\n            var previousPercent = parseInt(stateProgressPercent.lastChild.nodeValue);\n            previousPercent += 5;\n            if (previousPercent >= progressPercent) previousPercent = progressPercent;\n            that.cancelAnimationFrameID = requestAnimationFrame(function () {\n                that.textChildVoluation(that.stateProgressPercent, previousPercent);\n                if (previousPercent == 100) {\n                    that.stop();\n                    that.clearTimeoutID = setTimeout(function () {\n                        that.drawUI("hide");\n                    }, 1000);\n                    return;\n                }\n                if (previousPercent < progressPercent) animationFrame();\n            });\n        };\n        animationFrame();\n    },\n    textChildVoluation: function textChildVoluation(parentNode, textValue) {\n        if (parentNode.lastChild && parentNode.lastChild.nodeType == 3) parentNode.lastChild.nodeValue = textValue;else {\n            var newTextNode = document.createTextNode(textValue);\n            parentNode.appendChild(newTextNode);\n        }\n    },\n    writeStateGroupsList: function writeStateGroupsList(groupName, isLast) {\n        this.stateParentAppendChild(this.stateGroupsParent, groupName, isLast);\n    },\n    writeStateMembersList: function writeStateMembersList(memberName) {\n        this.stateParentAppendChild(this.stateMembersParent, memberName);\n    },\n    stateParentAppendChild: function stateParentAppendChild(parentNode, ChildText, isLast) {\n        if (parentNode.lastChild && parentNode.lastChild.lastChild && parentNode.lastChild.lastChild.nodeValue == ChildText) return;\n        var children = parentNode.children;\n        var newDiv = document.createElement("div");\n        this.textChildVoluation(newDiv, ChildText);\n        parentNode.appendChild(newDiv);\n        if (isLast) {\n            for (var i = 0; i < children.length; i++) {\n                children[i].setAttribute("name", "loaded");\n            }\n        } else {\n            for (var _i7 = 0; _i7 < children.length - 1; _i7++) {\n                children[_i7].setAttribute("name", "loaded");\n            }\n        }\n    },\n\n    drawUI: function drawUI(signal //signal="show"||"hide"\n    ) {\n        this.readyStateWrapShowOrHide(signal);\n    },\n    readyStateWrapShowOrHide: function readyStateWrapShowOrHide(signal //signal="show"||"hide"\n    ) {\n        switch (signal) {\n            case "show":\n                this.readyStateWrap.setAttribute("name", "show");\n                break;\n            case "hide":\n                this.readyStateWrap.setAttribute("name", "hide");\n                break;\n        }\n    },\n    reset: function reset() {\n        clearTimeout(this.clearTimeoutID);\n        this.previousProgressPercent = 0;\n        this.textChildVoluation(this.stateProgressPercent, 0);\n        this.stateGroupsParent.innerHTML = "";\n        this.stateMembersParent.innerHTML = "";\n        this.drawUI("show");\n    }\n};\n\nfunction danmuPoolSlider(danmuPool) {\n    var danmuPoolSlider = danmuPool.getElementsByClassName("video-player-danmu-list-slider")[0];\n    this.danmuPoolSlider = danmuPoolSlider;\n    this.sliderFixedLength = undefined;\n    this.sliderButton = danmuPoolSlider.getElementsByClassName("video-player-danmu-list-slider-button")[0];\n    this.buttonNatrueHeight = undefined;\n    this.buttonCurrentHeight = undefined;\n    this.outputCallback = function () {};\n    this.run();\n}\ndanmuPoolSlider.prototype = {\n    output: function output(outputSignal) {\n        this.outputCallback(outputSignal);\n    },\n    input: function input(inputSignal) {\n        var buttonMoveLength = parseInt(this.computeButtonMoveLength());\n        var buttonTop = inputSignal * buttonMoveLength;\n        this.setButtonTop(buttonTop);\n    },\n    run: function run() {\n        this.eventInstall();\n    },\n    reset: function reset() {\n        this.setButtonTop(0);\n    },\n    showOrHideSlider: function showOrHideSlider(showOrHide) {\n        switch (showOrHide) {\n            case "show":\n                this.danmuPoolSlider.style.display = "";\n                break;\n            case "hide":\n                this.danmuPoolSlider.style.display = "none";\n                break;\n        }\n    },\n    setButtonCurrentHeight: function setButtonCurrentHeight(proportion) {\n        var sliderFixedLength = this.getSliderFixedLength();\n        var expectButtonHeight = proportion * sliderFixedLength;\n        var buttonNatrueHeight = this.getButtonNatrueHeight();\n        var buttonCurrentHeight = expectButtonHeight < buttonNatrueHeight ? buttonNatrueHeight : expectButtonHeight;\n        this.buttonCurrentHeight = buttonCurrentHeight;\n        this.sliderButton.style.height = buttonCurrentHeight + "px";\n    },\n    getSliderFixedLength: function getSliderFixedLength() {\n        if (!this.sliderFixedLength) this.sliderFixedLength = this.danmuPoolSlider.offsetHeight;\n        return this.sliderFixedLength;\n    },\n    getButtonNatrueHeight: function getButtonNatrueHeight() {\n        if (!this.buttonNatrueHeight) this.buttonNatrueHeight = this.sliderButton.offsetHeight;\n        return this.buttonNatrueHeight;\n    },\n\n    eventInstall: function eventInstall() {\n        this.sliderButtonDrag();\n    },\n    sliderButtonDrag: function sliderButtonDrag() {\n        var that = this;\n        var previousMousePosY = undefined;\n        var mouseRelativeButtonTop = undefined;\n        var mouseRelativeButtonBottom = undefined;\n        var bodyMousemove = function bodyMousemove(event) {\n            var e = event || window.event;\n            var currentMousePosY = parseInt(e.clientY.toFixed(0));\n            if (previousMousePosY !== 0 && !previousMousePosY) return;\n            var sliderTop = that.danmuPoolSlider.getBoundingClientRect().top;\n            var sliderBottom = that.danmuPoolSlider.getBoundingClientRect().bottom;\n            if (currentMousePosY - mouseRelativeButtonTop < sliderTop) {\n                currentMousePosY = sliderTop + mouseRelativeButtonTop;\n            }\n            if (currentMousePosY + mouseRelativeButtonBottom > sliderBottom) {\n                currentMousePosY = sliderBottom - mouseRelativeButtonBottom;\n            }\n            var mouseMoveLength = currentMousePosY - previousMousePosY;\n            var buttonTop = that.getButtonTop();\n            var buttonMaxMoveLength = that.computeButtonMoveLength();\n            var buttonMinTop = 0;\n            var buttonMaxTop = buttonMaxMoveLength;\n            if (buttonTop + mouseMoveLength < buttonMinTop) mouseMoveLength = -(buttonTop - buttonMinTop);else if (buttonMaxTop < buttonTop + mouseMoveLength) mouseMoveLength = buttonMaxTop - buttonTop;\n            var outputSignal = ((buttonTop + mouseMoveLength) / buttonMaxMoveLength).toFixed(3);\n            // console.log(outputSignal)\n            that.setButtonTop(outputSignal * buttonMaxMoveLength);\n            that.output(outputSignal);\n            previousMousePosY = currentMousePosY;\n        };\n        var mousedownCallback = function mousedownCallback(event) {\n            that.danmuPoolSlider.style.opacity = 1;\n            var e = event || window.event;\n            previousMousePosY = parseInt(e.clientY.toFixed(0));\n            var mouseDownButtonPosY = previousMousePosY;\n            var buttonBoundingTop = that.sliderButton.getBoundingClientRect().top;\n            mouseRelativeButtonTop = mouseDownButtonPosY - buttonBoundingTop;\n            var buttonBoundingBottom = that.sliderButton.getBoundingClientRect().bottom;\n            mouseRelativeButtonBottom = buttonBoundingBottom - mouseDownButtonPosY;\n\n            // buttonTop=parseInt(that.sliderButton.style.top?that.sliderButton.style.top:0)\n            document.body.removeEventListener("mousemove", bodyMousemove);\n            document.body.addEventListener("mousemove", bodyMousemove);\n        };\n        this.sliderButton.addEventListener("mousedown", mousedownCallback);\n        var mouseupCallback = function mouseupCallback(event) {\n            that.danmuPoolSlider.style.opacity = "";\n            document.body.removeEventListener("mousemove", bodyMousemove);\n        };\n        document.body.addEventListener("mouseup", mouseupCallback);\n    },\n    computeButtonMoveLength: function computeButtonMoveLength() {\n        var sliderFixedLength = this.getSliderFixedLength();\n        var buttonCurrentLength = this.getButtonCurrentHeight();\n        var buttonMoveLength = sliderFixedLength - buttonCurrentLength;\n        return buttonMoveLength;\n    },\n\n    getButtonCurrentHeight: function getButtonCurrentHeight(expectButtonHeight) {\n        return this.buttonCurrentHeight;\n    },\n    getButtonTop: function getButtonTop() {\n        return this.sliderButton.style.top ? parseFloat(this.sliderButton.style.top) : 0;\n    },\n    setButtonTop: function setButtonTop(top) {\n        this.sliderButton.style.top = top + "px";\n    }\n};\n\nfunction danmuPoolModule(videoPlayer) {\n    this.videoPlayer = videoPlayer;\n    var danmuPool = videoPlayer.getElementsByClassName("video-player-danmu-wrap")[0];\n    this.danmuPool = danmuPool;\n    this.danmuPoolScroll = danmuPool.getElementsByClassName("video-player-danmu-list-scroll")[0];\n    this.danmuPoolPos = danmuPool.getElementsByClassName("video-player-danmu-list-scroll-position")[0];\n    this.danmuPoolRows = danmuPool.getElementsByClassName("video-player-danmu-list-row");\n    this.scrollPos = 0;\n    this.danmuRowHeight = undefined;\n    this.danmuData = undefined;\n    this.cancelAnimationFrameID = null;\n    this.sliderControl = new danmuPoolSlider(danmuPool);\n    this.outputCallback = function () {};\n    this.readyCallbackList = [];\n    this.run();\n}\ndanmuPoolModule.prototype = {\n    input: function input(danmuData) {\n        this.reset();\n        this.danmuData = danmuData;\n        this.setSliderControlStyle();\n        this.fillDanmuPool();\n        this.ready("danmuPoolModule");\n    },\n    output: function output(outputCallback) {\n        this.outputCallback(outputCallback);\n    },\n    ready: function ready(readyState) {\n        for (var i = 0; i < this.readyCallbackList.length; i++) {\n            this.readyCallbackList[i](readyState);\n        }this.readyCallbackList = [];\n    },\n    run: function run() {\n        this.eventInstall();\n        this.controlBind();\n    },\n    reset: function reset() {\n        this.sliderControl.reset();\n        this.scrollPos = 0;\n        cancelAnimationFrame(this.cancelAnimationFrameID);\n    },\n    eventInstall: function eventInstall() {\n        this.danmuPoolScrollMousewheel();\n    },\n    danmuPoolScrollMousewheel: function danmuPoolScrollMousewheel() {\n        var that = this;\n        var mousewheelCallback = function mousewheelCallback(event) {\n            var e = event || window.event;\n            e.preventDefault();\n            var mouseWheelData = void 0;\n            if (e.detail) mouseWheelData = -e.detail * 40;else if (e.wheelDelta) mouseWheelData = e.wheelDelta;\n            var danmuRowHeight = that.getDanmuRowHeight();\n            var addPosTop = void 0;\n            if (mouseWheelData < 0) addPosTop = -danmuRowHeight * 2;else if (mouseWheelData > 0) addPosTop = danmuRowHeight * 2;else addPosTop = 0;\n            // console.log(addPosTop)\n            that.output(addPosTop);\n            that.drawScrollWheel(addPosTop);\n        };\n        this.addMousewheelListener(this.danmuPoolScroll, mousewheelCallback);\n    },\n    addMousewheelListener: function addMousewheelListener(el, callback) {\n        el.addEventListener("DOMMouseScroll", callback);\n        el.addEventListener("mousewheel", callback);\n    },\n    removeMousewheelListener: function removeMousewheelListener(el, callback) {\n        el.removeEventListener("DOMMouseScroll", callback);\n        el.removeEventListener("mousewheel", callback);\n    },\n    controlBind: function controlBind() {\n        var that = this;\n        var controlOutputCallback = function controlOutputCallback(outputSignal) {\n            var poolScreenHeight = that.getDanmuPoolScreenHeight();\n            var poolScrollHeight = that.getDanmuPoolScrollHeight();\n            var addPosTop = -(poolScrollHeight - poolScreenHeight) * outputSignal - that.getAbsoluteScrollTop();\n            // console.log(addPosTop)\n            that.drawScrollWheel(addPosTop);\n        };\n        this.sliderControl.outputCallback = controlOutputCallback;\n        var moduleOutputCallback = function moduleOutputCallback(addPosTop) {\n            var absoluteScrollTop = that.getAbsoluteScrollTop();\n            var poolScreenHeight = that.getDanmuPoolScreenHeight();\n            var poolScrollHeight = that.getDanmuPoolScrollHeight();\n            var inputSignal = parseFloat((-absoluteScrollTop / (poolScrollHeight - poolScreenHeight)).toFixed(3));\n\n            that.sliderControl.input(inputSignal);\n        };\n        this.outputCallback = moduleOutputCallback;\n    },\n    drawScrollWheel: function drawScrollWheel(addPosTop) {\n        if (!addPosTop) return;\n        cancelAnimationFrame(this.cancelAnimationFrameID);\n        var frameNum = 6;\n        var addPosTopSlice = addPosTop / frameNum;\n        this.drawScrollWheelFrame(addPosTopSlice, frameNum);\n    },\n    drawScrollWheelFrame: function drawScrollWheelFrame(addPosTopSlice, frameNum) {\n        if (frameNum == 0) return;\n        this.setAbsoluteScrollTop(addPosTopSlice);\n        this.computeScrollTop();\n        this.fillDanmuPool();\n        var that = this;\n        this.cancelAnimationFrameID = requestAnimationFrame(function () {\n            that.drawScrollWheelFrame(addPosTopSlice, --frameNum);\n        });\n    },\n    setAbsoluteScrollTop: function setAbsoluteScrollTop(addPosTop) {\n        if (this.scrollPos + addPosTop > 0) {\n            this.scrollPos = 0;\n            return;\n        }\n        var scrollHeight = this.getDanmuPoolScrollHeight();\n        var danmuRowHeight = this.getDanmuRowHeight();\n        var screenHeight = this.getDanmuPoolScreenHeight();\n        if (scrollHeight <= screenHeight) return 0;\n        var minTop = -(scrollHeight - screenHeight);\n        if (this.scrollPos + addPosTop < minTop) {\n            this.scrollPos = minTop;\n            return;\n        }\n        this.scrollPos += addPosTop;\n    },\n    getDanmuPoolScrollHeight: function getDanmuPoolScrollHeight() {\n        return this.danmuData.length * this.getDanmuRowHeight();\n    },\n    getDanmuRowHeight: function getDanmuRowHeight() {\n        if (this.danmuRowHeight === undefined) this.danmuRowHeight = this.danmuPoolRows[0].offsetHeight;\n        return this.danmuRowHeight;\n    },\n    getDanmuPoolScreenHeight: function getDanmuPoolScreenHeight() {\n        return this.danmuPoolScroll.offsetHeight;\n    },\n    computeScrollTop: function computeScrollTop() {\n        var absoluteTop = this.getAbsoluteScrollTop();\n        var relativeTop = this.getRelativeScrollTop(absoluteTop);\n        this.setDanmuPoolPosTop(relativeTop);\n    },\n    getAbsoluteScrollTop: function getAbsoluteScrollTop() {\n        return this.scrollPos;\n    },\n    getRelativeScrollTop: function getRelativeScrollTop(absolutePosTop) {\n        var danmuRowHeight = this.getDanmuRowHeight();\n        if (absolutePosTop % danmuRowHeight == 0) {\n            return 0;\n        }\n        // if((absolutePosTop%danmuRowHeight)==0){\n        //     if(absolutePosTop<0)\n        //         return -danmuRowHeight\n        //     else\n        //         return 0\n        // }\n        return absolutePosTop % danmuRowHeight > 0 ? -(danmuRowHeight - absolutePosTop % danmuRowHeight) : absolutePosTop % danmuRowHeight;\n    },\n\n    setDanmuPoolPosTop: function setDanmuPoolPosTop(posTop, mouseWheelDirection) {\n        var previousPosTop = this.getDanmuPoolPosTop();\n        this.danmuPoolPos.style.top = posTop + "px";\n    },\n    getDanmuPoolPosTop: function getDanmuPoolPosTop() {\n        return parseFloat(this.danmuPoolPos.style.top);\n    },\n    fillDanmuPool: function fillDanmuPool() {\n        var absoluteTop = this.getAbsoluteScrollTop();\n        var posTop = this.getDanmuPoolPosTop();\n        var danmuRowHeight = this.getDanmuRowHeight();\n        var danmuDataIndex = void 0;\n        // if(posTop==-danmuRowHeight)\n        //     danmuDataIndex=absoluteTop/danmuRowHeight+1\n        // else if(posTop==0)\n        //     danmuDataIndex=absoluteTop/danmuRowHeight\n        // else\n        //     danmuDataIndex=parseInt(absoluteTop/danmuRowHeight)+1\n        // danmuDataIndex=-danmuDataIndex\n\n        if (posTop == 0) danmuDataIndex = absoluteTop / danmuRowHeight;else danmuDataIndex = Math.ceil(absoluteTop / danmuRowHeight);\n        danmuDataIndex = -danmuDataIndex;\n        // danmuDataIndex=-parseInt(absoluteTop/danmuRowHeight)\n        // let danmuDataIndex=(absoluteTop/danmuRowHeight==0)?absoluteTop/danmuRowHeight:(Math.floor(absoluteTop/danmuRowHeight)-1)\n        if (!this.danmuData) return;\n        var danmuData = this.danmuData;\n        var danmuPoolRows = this.danmuPoolRows;\n        var documentFragment = document.createDocumentFragment();\n        for (var i = 0, l = danmuDataIndex; i < danmuPoolRows.length; i++, l++) {\n            var thisRow = danmuPoolRows[i];\n            thisRow = thisRow.cloneNode(true);\n            documentFragment.appendChild(thisRow);\n            if (l >= danmuData.length || l < 0) {\n                thisRow.style.opacity = 0;\n                continue;\n            } else thisRow.style.opacity = 1;\n            var currentTimeEl = thisRow.getElementsByClassName("video-player-danmu-list-row-time")[0];\n            var sendDateEl = thisRow.getElementsByClassName("video-player-danmu-list-row-date")[0];\n            var contentEl = thisRow.getElementsByClassName("video-player-danmu-list-row-content")[0];\n            var thisData = danmuData[l];\n            if (!thisData) continue;\n            var currentTimeText = this.timeToText(thisData.currentTime);\n            var sendDateText = thisData.sendTime;\n            var contentText = thisData.content;\n            this.textChildVoluation(currentTimeEl, currentTimeText);\n            this.textChildVoluation(sendDateEl, sendDateText);\n            this.textChildVoluation(contentEl, contentText);\n        }\n        this.danmuPoolPos.innerHTML = "";\n        this.danmuPoolPos.appendChild(documentFragment);\n    },\n    timeToText: function timeToText(seconds) {\n        var padNumber = function padNumber(num, fill) {\n            var len = (\'\' + num).length;\n            return Array(fill > len ? fill - len + 1 || 0 : 0).join(0) + num;\n        };\n        var minutesText = padNumber(parseInt(seconds / 60), 2);\n        var secondsText = padNumber(parseInt(seconds % 60), 2);\n        return minutesText + ":" + secondsText;\n    },\n    textChildVoluation: function textChildVoluation(parentNode, textValue) {\n        if (parentNode.lastChild && parentNode.lastChild.nodeType == 3) parentNode.lastChild.nodeValue = textValue;else {\n            var newTextNode = document.createTextNode(textValue);\n            parentNode.appendChild(newTextNode);\n        }\n    },\n    setSliderControlStyle: function setSliderControlStyle() {\n        this.setSliderShowOrNot();\n        this.setSliderButtonHeight();\n    },\n    setSliderShowOrNot: function setSliderShowOrNot() {\n        var danmuDataNum = this.danmuData.length;\n        var danmuRowNum = this.danmuPoolRows.length - 1;\n        var showOrNot = void 0;\n        if (danmuDataNum <= danmuRowNum) showOrNot = "hide";else showOrNot = "show";\n        this.sliderControl.showOrHideSlider(showOrNot);\n    },\n    setSliderButtonHeight: function setSliderButtonHeight() {\n        var screenHeight = this.danmuPoolScroll.offsetHeight;\n        var scroolHeight = this.getDanmuPoolScrollHeight();\n        var proportion = screenHeight / scroolHeight;\n        this.sliderControl.setButtonCurrentHeight(proportion);\n    }\n};\n\nfunction videoPlayerModule(videoPageEl) {\n    var videoPlayer = videoPageEl.getElementsByClassName("video-player")[0];\n    this.videoPlayer = videoPlayer;\n    this.videoElement = this.videoPlayer.getElementsByClassName("video-player-warp-main-video")[0];\n    this.controlsModule = new controlsModule(this.videoPlayer);\n    this.cavasModule = new canvasModule(this.videoPlayer);\n    this.danmuRequester = new getDanmuXml();\n    this.readyStateModule = new readyState(this.videoPlayer);\n    this.controlsResetCallback = function () {};\n    this.playerReLoadCallbackList = [];\n    this.unbindVideoAndControlsCallbackList = [];\n    this.unbindVideoAndCanvasCallbackList = [];\n    this.readyProgressCallbackList = [];\n    this.run();\n}\nvideoPlayerModule.prototype = {\n    run: function run() {\n        this.bindVideoAndControls();\n        this.connectVideoAndCanvasModule();\n        this.connectDanmuRequesterAndModule();\n        this.connectScreenControlAndCavasMudule();\n        this.connectReadyStateModule();\n        this.addControlsResetOrder();\n        this.connectDanmuControlsAndCavasMudule();\n        this.connectSendControlAndCavasModule();\n        this.addEventListenerAndCavasMudule();\n    },\n    input: function input(data //data={\n    //     title:"",\n    //     author:"",\n    //     videoSrc:"",\n    //     danmuSrc:""\n    // }\n    ) {\n        this.playerReload();\n        var that = this;\n        var getVideoLoaded = function getVideoLoaded() {\n            var returnCallback = function returnCallback(videoSrc) {\n                var returnObj = {};\n                var then = function then(nextReloadObj) {\n                    var canplayCallback = function canplayCallback() {\n                        that.videoElement.removeEventListener("canplay", canplayCallback);\n                        nextReloadObj.run();\n                    };\n                    that.videoElement.addEventListener("canplay", canplayCallback);\n                    that.playerReLoadCallbackList.push(function () {\n                        that.videoElement.removeEventListener("canplay", canplayCallback);\n                    });\n                    return nextReloadObj;\n                };\n                returnObj.run = function () {\n                    that.videoLoad(videoSrc);\n                };\n                returnObj.then = then;\n                return returnObj;\n            };\n            return returnCallback;\n        };\n        var videoLoaded = getVideoLoaded();\n        var getControlsReseted = function getControlsReseted() {\n            var resetLastestControl = that.getResetedLastestControl();\n            var addControlsResetListener = function addControlsResetListener(control, callback) {\n                control.readyCallbackList.push(callback);\n            };\n            var removeControlsResetListener = function removeControlsResetListener(control, callback) {\n                var readyCallbackList = control.readyCallbackList;\n                for (var i = 0; i < readyCallbackList.length; i++) {\n                    if (readyCallbackList[i] == callback) {\n                        control.readyCallbackList.splice(i, 1);\n                    }\n                }\n            };\n            var returnCallback = function returnCallback() {\n                var returnObj = {};\n                var then = function then(nextReloadObj) {\n                    var resetedCallback = function resetedCallback() {\n                        removeControlsResetListener(resetLastestControl, resetedCallback);\n                        nextReloadObj.run();\n                    };\n                    addControlsResetListener(resetLastestControl, resetedCallback);\n                    that.playerReLoadCallbackList.push(function () {\n                        removeControlsResetListener(resetLastestControl, resetedCallback);\n                    });\n                    return nextReloadObj;\n                };\n                returnObj.run = function () {\n                    that.controlsReset();\n                };\n                returnObj.then = then;\n                return returnObj;\n            };\n            return returnCallback;\n        };\n        var controlsReseted = getControlsReseted();\n        var getDanmuRequested = function getDanmuRequested() {\n            var requestedModule = that.cavasModule;\n            var addModuleRequestedListener = function addModuleRequestedListener(module, callback) {\n                module.readyCallbackList.push(callback);\n            };\n            var removeModuleRequestedListener = function removeModuleRequestedListener(module, callback) {\n                var readyCallbackList = module.readyCallbackList;\n                for (var i = 0; i < readyCallbackList.length; i++) {\n                    if (readyCallbackList[i] == callback) {\n                        module.readyCallbackList.splice(i, 1);\n                    }\n                }\n            };\n            var returnCallback = function returnCallback(danmuSrc) {\n                var returnObj = {};\n                var then = function then(nextReloadObj) {\n                    var requestedCallback = function requestedCallback() {\n                        removeModuleRequestedListener(requestedModule, requestedCallback);\n                        nextReloadObj.run();\n                    };\n                    addModuleRequestedListener(requestedModule, requestedCallback);\n                    that.playerReLoadCallbackList.push(function () {\n                        removeModuleRequestedListener(requestedModule, requestedCallback);\n                    });\n                    return nextReloadObj;\n                };\n                returnObj.run = function () {\n                    that.danmuRequest(danmuSrc);\n                };\n                returnObj.then = then;\n                return returnObj;\n            };\n            return returnCallback;\n        };\n        var danmuRequested = getDanmuRequested();\n        var playerFirstLoadModule = videoLoaded(data.videoSrc);\n        playerFirstLoadModule.then(controlsReseted()).then(danmuRequested(data.danmuSrc));\n        playerFirstLoadModule.run();\n    },\n    playerReload: function playerReload() {\n        this.videoReset();\n        this.canvasReset();\n        this.readyStateClean();\n        for (var i = 0; i < this.playerReLoadCallbackList.length; i++) {\n            this.playerReLoadCallbackList[i]();\n        }this.playerReLoadCallbackList = [];\n    },\n    videoReset: function videoReset() {\n        this.videoElement.currentTime = 0;\n        this.videoElement.src = "";\n        this.videoElement.volume = 1;\n        this.videoElement.loop = false;\n    },\n    canvasReset: function canvasReset() {\n        this.cavasModule.reset();\n    },\n    readyStateClean: function readyStateClean() {\n        this.readyStateModule.reset();\n    },\n    videoLoad: function videoLoad(videoSrc) {\n        this.videoElement.src = videoSrc;\n    },\n    danmuRequest: function danmuRequest(danmuSrc) {\n        this.danmuRequester.input(danmuSrc);\n    },\n    controlsReset: function controlsReset() {\n        this.controlsResetCallback();\n    },\n    addControlsResetOrder: function addControlsResetOrder() {\n        var playPauseControl = this.controlsModule.videoControls.playPauseControl;\n        var bufferedControl = this.controlsModule.videoControls.bufferedControl;\n        var timesControl = this.controlsModule.videoControls.timesControl;\n        var volumeControl = this.controlsModule.videoControls.volumeControl;\n        var repeatControl = this.controlsModule.videoControls.repeatControl;\n        var screenControl = this.controlsModule.screenControl;\n        var danmuControl = this.controlsModule.danmuControls.danmuSettingControl;\n        var sendControl = this.controlsModule.sendControl;\n        var then = function then(control) {\n            delete this.then;\n            var pushCallback = function pushCallback() {\n                control.firstSetUI();\n            };\n            this.readyCallbackList.push(pushCallback);\n            return control;\n        };\n        var getControlReseted = function getControlReseted(control) {\n            control.then = then;\n            return control;\n        };\n        var playPauseControlReseted = getControlReseted(playPauseControl);\n        var bufferedControlReseted = getControlReseted(bufferedControl);\n        var timesControlReseted = getControlReseted(timesControl);\n        var volumeControlReseted = getControlReseted(volumeControl);\n        var repeatControlReseted = getControlReseted(repeatControl);\n        var screenControlReseted = getControlReseted(screenControl);\n        var danmuControlReseted = getControlReseted(danmuControl);\n        var sendControlReseted = getControlReseted(sendControl);\n        playPauseControlReseted.then(bufferedControlReseted).then(timesControlReseted).then(volumeControlReseted).then(repeatControlReseted).then(screenControlReseted).then(danmuControlReseted).then(sendControlReseted);\n        this.setResetedLastestControl(sendControl);\n        var playPauseControlReset = function playPauseControlReset() {\n            playPauseControl.firstSetUI();\n        };\n        this.controlsResetCallback = function () {\n            playPauseControlReset();\n        };\n    },\n    setResetedLastestControl: function setResetedLastestControl(lastestControl) {\n        this.restedLastestControl = lastestControl;\n    },\n    getResetedLastestControl: function getResetedLastestControl() {\n        return this.restedLastestControl;\n    },\n\n    connectReadyStateModule: function connectReadyStateModule() {\n\n        this.connectVideoAndReadyStateModule("加载视频地址", 1, 3);\n        this.connectControlsAndReadyStateModule("播放器初始化", 2, 3);\n        this.connectDanmuRequesterAndReadyStateModule("获取弹幕数据", 3, 3);\n    },\n    connectVideoAndReadyStateModule: function connectVideoAndReadyStateModule(groupNameText, groupRankNum, groupMaxNum) {\n        var eventList = ["loadstart", "durationchange", "loadedmetadata", "loadeddata", "canplay"];\n        var that = this;\n        var connecter = function connecter(eventName, memberRankNum, memberMaxNum) {\n            var eventCallback = function eventCallback() {\n                var readuStateInputSignal = {\n                    groupName: groupNameText,\n                    groupRank: groupRankNum,\n                    groupNum: groupMaxNum,\n                    memberName: eventName,\n                    memberRank: memberRankNum,\n                    memberNum: memberMaxNum\n                };\n                that.readyStateModule.input(readuStateInputSignal);\n            };\n            that.videoElement.addEventListener(eventName, eventCallback);\n        };\n        for (var i = 0; i < eventList.length; i++) {\n            connecter(eventList[i], i + 1, eventList.length);\n        }\n        this.videoElement.addEventListener(eventList[0], function () {\n            that.readyStateModule.start();\n        });\n    },\n    connectControlsAndReadyStateModule: function connectControlsAndReadyStateModule(groupNameText, groupRankNum, groupMaxNum) {\n        var controlsList = [this.controlsModule.videoControls.playPauseControl, this.controlsModule.videoControls.bufferedControl, this.controlsModule.videoControls.timesControl, this.controlsModule.videoControls.volumeControl, this.controlsModule.videoControls.repeatControl, this.controlsModule.screenControl, this.controlsModule.danmuControls.danmuSettingControl, this.controlsModule.sendControl];\n        var that = this;\n        var connecter = function connecter(control, memberRankNum, memberMaxNum) {\n            var controlReadyCallback = function controlReadyCallback(outputSignal) {\n                var readuStateInputSignal = {\n                    groupName: groupNameText,\n                    groupRank: groupRankNum,\n                    groupNum: groupMaxNum,\n                    memberName: outputSignal,\n                    memberRank: memberRankNum,\n                    memberNum: memberMaxNum\n                };\n                that.readyStateModule.input(readuStateInputSignal);\n            };\n            control.readyCallbackList.push(controlReadyCallback);\n        };\n        for (var i = 0; i < controlsList.length; i++) {\n            connecter(controlsList[i], i + 1, controlsList.length);\n        }\n    },\n    connectDanmuRequesterAndReadyStateModule: function connectDanmuRequesterAndReadyStateModule(groupNameText, groupRankNum, groupMaxNum) {\n        var XMLHttpRequestObj = this.danmuRequester.XMLHttpRequestObj;\n        var that = this;\n        var readystatechangeCallback = function readystatechangeCallback() {\n            var readuStateInputSignal = {\n                groupName: groupNameText,\n                groupRank: groupRankNum,\n                groupNum: groupMaxNum,\n                memberName: "readyState" + " : " + XMLHttpRequestObj.readyState,\n                memberRank: parseInt(XMLHttpRequestObj.readyState),\n                memberNum: 4\n            };\n            if (XMLHttpRequestObj.readyState != 4) that.readyStateModule.input(readuStateInputSignal);else {\n                if (XMLHttpRequestObj.status == 200) that.readyStateModule.input(readuStateInputSignal);\n            }\n        };\n        XMLHttpRequestObj.addEventListener("readystatechange", readystatechangeCallback);\n    },\n\n    connectDanmuControlsAndCavasMudule: function connectDanmuControlsAndCavasMudule() {\n        this.connectDanmuOpacityControlAndCavasMudule();\n        this.connectDanmuModeControlAndCavasMudule();\n    },\n    connectDanmuOpacityControlAndCavasMudule: function connectDanmuOpacityControlAndCavasMudule() {\n        var danmuOpacityControl = this.controlsModule.danmuControls.danmuOpacityControl;\n        var that = this;\n        var cancelAnimationFrameID = null;\n        var animationClose = function animationClose() {\n            cancelAnimationFrame(cancelAnimationFrameID);\n        };\n        var animationPlaying = function animationPlaying() {\n            that.cavasModule.draw();\n            cancelAnimationFrameID = requestAnimationFrame(animationPlaying);\n        };\n        var animation_1S = function animation_1S() {\n            animationPlaying();\n            setTimeout(animationClose, 1000);\n        };\n        var controlOuputCallback = function controlOuputCallback(outputSignal) {\n            that.cavasModule.danmuOpacity = outputSignal;\n            animation_1S();\n        };\n        danmuOpacityControl.outputCallback = controlOuputCallback;\n    },\n    connectDanmuModeControlAndCavasMudule: function connectDanmuModeControlAndCavasMudule() {\n        var danmuModeControl = this.controlsModule.danmuControls.danmuModeControl;\n        var that = this;\n        var cancelAnimationFrameID = null;\n        var animationClose = function animationClose() {\n            cancelAnimationFrame(cancelAnimationFrameID);\n        };\n        var animationPlaying = function animationPlaying() {\n            that.cavasModule.draw();\n            cancelAnimationFrameID = requestAnimationFrame(animationPlaying);\n        };\n        var animation_1S = function animation_1S() {\n            animationPlaying();\n            setTimeout(animationClose, 1000);\n        };\n        var controlOuputCallback = function controlOuputCallback(outputSignal) {\n            //{type:"fixed-top"||"fixed-bottom"||"move-pos",mode:"danmu-on"||"danmu-off"}\n            var turnONorOFF = void 0;\n            switch (outputSignal.mode) {\n                case "danmu-on":\n                    turnONorOFF = true;\n                    break;\n                case "danmu-off":\n                    turnONorOFF = false;\n            }\n            switch (outputSignal.type) {\n                case "move-pos":\n                    that.cavasModule.danmuMoveShow = turnONorOFF;\n                    break;\n                case "fixed-top":\n                    that.cavasModule.danmuTopShow = turnONorOFF;\n                    break;\n                case "fixed-bottom":\n                    that.cavasModule.danmuBottomShow = turnONorOFF;\n                    break;\n            }\n            animation_1S();\n        };\n        danmuModeControl.outputCallback = controlOuputCallback;\n    },\n    connectScreenControlAndCavasMudule: function connectScreenControlAndCavasMudule() {\n        var that = this;\n        var cancelAnimationFrameID = null;\n        var animationClose = function animationClose() {\n            cancelAnimationFrame(cancelAnimationFrameID);\n        };\n        var animationPlaying = function animationPlaying() {\n            that.cavasModule.draw();\n            cancelAnimationFrameID = requestAnimationFrame(animationPlaying);\n        };\n        var animation_1S = function animation_1S() {\n            animationPlaying();\n            setTimeout(animationClose, 1000);\n        };\n        var controlOuputCallback = function controlOuputCallback(controlOutputSignal) {\n            animation_1S();\n        };\n        this.controlsModule.screenControl.outputCallback = controlOuputCallback;\n    },\n    addEventListenerAndCavasMudule: function addEventListenerAndCavasMudule() {\n        this.windowResizeAndCavasMudule();\n    },\n    windowResizeAndCavasMudule: function windowResizeAndCavasMudule() {\n        var that = this;\n        var cancelAnimationFrameID = null;\n        var animationClose = function animationClose() {\n            cancelAnimationFrame(cancelAnimationFrameID);\n        };\n        var animationPlaying = function animationPlaying() {\n            that.cavasModule.draw();\n            cancelAnimationFrameID = requestAnimationFrame(animationPlaying);\n        };\n        var animation_1S = function animation_1S() {\n            animationPlaying();\n            setTimeout(animationClose, 1000);\n        };\n        var resizeCallback = function resizeCallback(controlOutputSignal) {\n            animation_1S();\n        };\n        window.addEventListener("resize", resizeCallback);\n    },\n    connectSendControlAndCavasModule: function connectSendControlAndCavasModule() {\n        var that = this;\n        var controlOutputCallback = function controlOutputCallback(outputSignal) {\n            outputSignal.currentSend = true;\n            that.cavasModule.sendData(outputSignal);\n        };\n        this.controlsModule.sendControl.outputCallback = controlOutputCallback;\n    },\n    connectDanmuRequesterAndModule: function connectDanmuRequesterAndModule() {\n        var that = this;\n        var requesterOutputCallback = function requesterOutputCallback(danmuJson) {\n            that.connectDanmuRequesterAndCavasModule(danmuJson);\n            that.connectDanmuRequesterAndDanmuPoolModule(danmuJson);\n        };\n        this.danmuRequester.outputCallback = requesterOutputCallback;\n    },\n    connectDanmuRequesterAndCavasModule: function connectDanmuRequesterAndCavasModule(danmuJson) {\n        this.cavasModule.input(danmuJson);\n    },\n    connectDanmuRequesterAndDanmuPoolModule: function connectDanmuRequesterAndDanmuPoolModule(danmuJson) {\n        this.danmuPoolModule.input(danmuJson);\n    },\n    connectVideoAndCanvasModule: function connectVideoAndCanvasModule() {\n        var videoElement = this.videoElement;\n        var cavasModule = this.cavasModule;\n        var playingCallback = function playingCallback() {\n            cavasModule.play();\n        };\n        videoElement.addEventListener("playing", playingCallback);\n        var pauseCallback = function pauseCallback() {\n            cavasModule.pause();\n        };\n        videoElement.addEventListener("pause", pauseCallback);\n        var endedCallback = function endedCallback() {\n            cavasModule.clean();\n        };\n        videoElement.addEventListener("ended", endedCallback);\n    },\n    bindVideoAndControls: function bindVideoAndControls() {\n        this.bindVideoAndPlayPauseControl();\n        this.bindVideoAndBufferedControl();\n        // this.bindVideoAndCurrentTimeControl()\n        this.bindVideoAndTimesControl();\n        this.bindVideoAndVolumeControl();\n        this.bindVideoAndRepeatControl();\n    },\n    bindVideoAndPlayPauseControl: function bindVideoAndPlayPauseControl() {\n        var videoElement = this.videoElement;\n        var playPauseControl = this.controlsModule.videoControls.playPauseControl;\n        var controlOutputCallback = function controlOutputCallback(outputSignal) {\n            switch (outputSignal) {\n                case "play":\n                    videoElement.play();\n                    break;\n                case "pause":\n                    videoElement.pause();\n                    break;\n            }\n        };\n        playPauseControl.outputCallback = controlOutputCallback;\n        this.unbindVideoAndControlsCallbackList.push(function () {\n            playPauseControl.outputCallback = function () {};\n        });\n        var videoPlayingCallback = function videoPlayingCallback() {\n            playPauseControl.input("play");\n        };\n        videoElement.addEventListener("playing", videoPlayingCallback);\n        this.unbindVideoAndControlsCallbackList.push(function () {\n            videoElement.removeEventListener("playing", videoPlayingCallback);\n        });\n        var videoPauseCallback = function videoPauseCallback() {\n            playPauseControl.input("pause");\n        };\n        videoElement.addEventListener("pause", videoPauseCallback);\n        this.unbindVideoAndControlsCallbackList.push(function () {\n            videoElement.removeEventListener("pause", videoPauseCallback);\n        });\n    },\n    bindVideoAndBufferedControl: function bindVideoAndBufferedControl() {\n        var videoElement = this.videoElement;\n        var bufferedControl = this.controlsModule.videoControls.bufferedControl;\n        var bufferedStartTime = 0;\n        var videoSeekedCallback = function videoSeekedCallback() {\n            bufferedStartTime = videoElement.currentTime;\n        };\n        videoElement.addEventListener("seeked", videoSeekedCallback);\n        var videoEndedCallback = function videoEndedCallback() {\n            bufferedStartTime = 0;\n        };\n        videoElement.addEventListener("ended", videoEndedCallback);\n        var controlInputCallback = function controlInputCallback() {\n            var buffered = videoElement.buffered;\n            if (buffered.length == 0) return;\n            var bufferedIndex = buffered.length - 1;\n            for (var i = bufferedIndex; i >= 0; i--) {\n                if (buffered.start(bufferedIndex) > bufferedStartTime) bufferedIndex--;else break;\n            }\n            // console.log(bufferedIndex)\n            var bufferedEndTime = buffered.end(bufferedIndex);\n            var duration = videoElement.duration;\n            var controlInputSignal = bufferedEndTime / duration > 1 ? 1 : bufferedEndTime / duration;\n            // console.log(controlInputSignal)\n            bufferedControl.input(controlInputSignal);\n        };\n\n        var videoTimeupdateCallback = function videoTimeupdateCallback() {\n            controlInputCallback();\n        };\n        videoElement.addEventListener("timeupdate", videoTimeupdateCallback);\n        this.unbindVideoAndControlsCallbackList.push(function () {\n            videoElement.removeEventListener("timeupdate", videoTimeupdateCallback);\n        });\n        var cancelAnimationFrameID = null;\n        var clearTimeoutID = null;\n        function controlInputContinue(continueTimes) {\n            this.continueTimes = continueTimes;\n            if (cancelAnimationFrameID) {\n                cancelAnimationFrame(cancelAnimationFrameID);\n                cancelAnimationFrameID = null;\n            }\n            if (clearTimeoutID) {\n                clearTimeout(clearTimeoutID);\n                clearTimeoutID = null;\n            }\n            this.controlInputCallback = controlInputCallback;\n            this.run();\n        }\n        controlInputContinue.prototype = {\n            run: function run() {\n                var that = this;\n                if (!this.clearTimeoutId) {\n                    this.clearTimeoutId = setTimeout(function () {\n                        cancelAnimationFrame(cancelAnimationFrameID);\n                        clearTimeout(that.clearTimeoutId);\n                        cancelAnimationFrameID = null;\n                        clearTimeoutID = null;\n                    }, this.continueTimes);\n                }\n                this.controlInputCallback();\n                cancelAnimationFrameID = requestAnimationFrame(function () {\n                    that.run();\n                });\n            }\n            // if(videoElement.readyState==4){\n            //     new controlInputContinue(1000)\n            // }\n        };var canplayCallback = function canplayCallback() {\n            new controlInputContinue(1000);\n        };\n        videoElement.addEventListener("canplay", canplayCallback);\n        this.unbindVideoAndControlsCallbackList.push(function () {\n            videoElement.removeEventListener("canplay", canplayCallback);\n        });\n        var videoSeekedCallback_2 = function videoSeekedCallback_2() {\n            new controlInputContinue(1000);\n        };\n        videoElement.addEventListener("seeked", videoSeekedCallback_2);\n        this.unbindVideoAndControlsCallbackList.push(function () {\n            videoElement.removeEventListener("seeked", videoSeekedCallback_2);\n        });\n    },\n    bindVideoAndTimesControl: function bindVideoAndTimesControl() {\n        var videoElement = this.videoElement;\n        var timesControl = this.controlsModule.videoControls.timesControl;\n        var outputSpacing = 400;\n        var clearTimeoutID = null;\n        var controlOutputCallback = function controlOutputCallback(outputSignal) {\n            if (clearTimeoutID == null) videoElement.currentTime = parseFloat(videoElement.duration.toFixed(2)) * parseFloat(outputSignal.toFixed(2));\n            // console.log(outputSignal)\n            else {\n                    clearTimeout(clearTimeoutID);\n                    setTimeoutID = setTimeout(function () {\n                        videoElement.currentTime = parseFloat(videoElement.duration.toFixed(2)) * parseFloat(outputSignal.toFixed(2));\n                        clearTimeoutID = null;\n                    }, outputSpacing);\n                }\n        };\n        timesControl.outputCallback = controlOutputCallback;\n        this.unbindVideoAndControlsCallbackList.push(function () {\n            timesControl.outputCallback = function () {};\n        });\n        var videoTimeupdateCallback = function videoTimeupdateCallback() {\n            var inputSignal = videoElement.currentTime / videoElement.duration;\n            timesControl.input(inputSignal);\n        };\n        videoElement.addEventListener("timeupdate", videoTimeupdateCallback);\n        this.unbindVideoAndControlsCallbackList.push(function () {\n            videoElement.removeEventListener("timeupdate", videoTimeupdateCallback);\n        });\n    },\n    bindVideoAndVolumeControl: function bindVideoAndVolumeControl() {\n        var videoElement = this.videoElement;\n        var volumeControl = this.controlsModule.videoControls.volumeControl;\n        var outputSpacing = 400;\n        var clearTimeoutID = null;\n        var controlOutputCallback = function controlOutputCallback(outputSignal) {\n            if (clearTimeoutID == null) videoElement.volume = parseFloat(outputSignal.toFixed(2));\n            // console.log(outputSignal)\n            else {\n                    clearTimeout(clearTimeoutID);\n                    setTimeoutID = setTimeout(function () {\n                        videoElement.volume = parseFloat(outputSignal.toFixed(2));\n                        clearTimeoutID = null;\n                    }, outputSpacing);\n                }\n        };\n        volumeControl.outputCallback = controlOutputCallback;\n    },\n    bindVideoAndRepeatControl: function bindVideoAndRepeatControl() {\n        var videoElement = this.videoElement;\n        var repeatControl = this.controlsModule.videoControls.repeatControl;\n        var controlOutputCallback = function controlOutputCallback(outputSignal) {\n            switch (outputSignal) {\n                case "repeat-on":\n                    videoElement.loop = true;\n                    break;\n                case "repeat-off":\n                    videoElement.loop = false;\n                    break;\n            }\n        };\n        repeatControl.outputCallback = controlOutputCallback;\n    },\n    unbindVideoAndControls: function unbindVideoAndControls() {\n        var unbindCallList = this.unbindVideoAndControlsCallbackList;\n        for (var i = 0; i < unbindCallListlength; i++) {\n            unbindCallList[i]();\n        }this.unbindVideoAndControlsCallbackList = [];\n    }\n\n    // ======================================\n};function videoAboutModule(videoPageEl) {\n    this.videoPageEl = videoPageEl;\n    var videoAboutEl = videoPageEl.getElementsByClassName("video-about")[0];\n    this.videoAboutEl = videoAboutEl;\n    this.videoTitleEl = videoAboutEl.getElementsByClassName("video-title")[0];\n    this.authorAvatarEl = videoAboutEl.getElementsByClassName("video-author-avatar")[0];\n    this.authorNameEl = videoAboutEl.getElementsByClassName("video-author-name")[0];\n}\nvideoAboutModule.prototype = {\n    input: function input(data) {\n        var videoTitleText = data.title;\n        this.setVideoTitleElTextNode(videoTitleText);\n        var authorAvatarSrc = data.authorAvatar;\n        this.setAuthorAvatarElSrc(authorAvatarSrc);\n        var authorNameText = data.authorName;\n        this.setAuthorNameElTextNode(authorNameText);\n    },\n    setVideoTitleElTextNode: function setVideoTitleElTextNode(textValue) {\n        this.textChildVoluation(this.videoTitleEl, textValue);\n    },\n    setAuthorAvatarElSrc: function setAuthorAvatarElSrc(imageSrc) {\n        this.authorAvatarEl.src = imageSrc;\n    },\n    setAuthorNameElTextNode: function setAuthorNameElTextNode(textValue) {\n        this.textChildVoluation(this.authorNameEl, textValue);\n    },\n    textChildVoluation: function textChildVoluation(parentNode, textValue) {\n        if (parentNode.lastChild && parentNode.lastChild.nodeType == 3) parentNode.lastChild.nodeValue = textValue;else {\n            var newTextNode = document.createTextNode(textValue);\n            parentNode.appendChild(newTextNode);\n        }\n    }\n};\n\nfunction videoLabelModule(videoPageEl) {\n    this.videoPageEl = videoPageEl;\n    var videoLabelEl = videoPageEl.getElementsByClassName("video-label")[0];\n    this.videoLabelEl = videoLabelEl;\n    this.outputCallback = function () {};\n    this.run();\n}\nvideoLabelModule.prototype = {\n    output: function output(outputSignal) {\n        this.outputCallback(outputSignal);\n    },\n    run: function run() {\n        this.eventInstall();\n    },\n    input: function input(data) {\n        this.reset();\n        var videoLabelArr = data.label;\n        var documentFragment = document.createDocumentFragment();\n        for (var i = 0; i < videoLabelArr.length; i++) {\n            var textNode = document.createTextNode(videoLabelArr[i]);\n            var pEl = document.createElement("p");\n            pEl.appendChild(textNode);\n            documentFragment.appendChild(pEl);\n        }\n        this.videoLabelEl.appendChild(documentFragment);\n    },\n    reset: function reset() {\n        this.videoLabelEl.innerHTML = "";\n    },\n    eventInstall: function eventInstall() {\n        this.videoLabelMemberClick();\n    },\n    videoLabelMemberClick: function videoLabelMemberClick() {\n        var that = this;\n        var labelParentClick = function labelParentClick(event) {\n            var e = event || window.event;\n            var target = e.target || e.srcElement;\n            if (target.tagName != "P") return;\n            var outputSignal = target.firstChild.nodeValue;\n            that.output(outputSignal);\n        };\n        this.videoLabelEl.addEventListener("click", labelParentClick);\n    }\n};\nfunction videoInfoModule(videoPageEl) {\n    this.videoPageEl = videoPageEl;\n    var videoInfoEl = videoPageEl.getElementsByClassName("video-info")[0];\n    this.videoInfoEl = videoInfoEl;\n}\nvideoInfoModule.prototype = {\n    input: function input(data) {\n        var videoInfoText = data.info;\n        this.videoInfoEl.innerHTML = videoInfoText;\n    }\n};\n\nfunction videoPageModule() {\n    var videoPageEl = document.getElementById("video-page");\n    this.videoPlayerModule = new videoPlayerModule(videoPageEl);\n    this.videoAboutModule = new videoAboutModule(videoPageEl);\n    this.videoLabelModule = new videoLabelModule(videoPageEl);\n    this.videoInfoModule = new videoInfoModule(videoPageEl);\n    this.pageCloseButton = document.getElementById("video-page-close-button");\n    this.run();\n}\nvideoPageModule.prototype = {\n    run: function run() {\n        this.eventInstall();\n        this.moduleOutput();\n    },\n    eventInstall: function eventInstall() {\n        this.closeButtonClick();\n    },\n    closeButtonClick: function closeButtonClick() {\n        var that = this;\n        var cilckCallback = function cilckCallback() {\n            that.close();\n        };\n        this.pageCloseButton.addEventListener("click", cilckCallback);\n    },\n    input: function input(data) {\n        this.open();\n        this.videoPlayerModule.input(data);\n        this.videoAboutModule.input(data);\n        this.videoLabelModule.input(data);\n        this.videoInfoModule.input(data);\n    },\n    moduleOutput: function moduleOutput() {\n        this.videoLabelModuleOutput();\n    },\n    videoLabelModuleOutput: function videoLabelModuleOutput() {\n        var that = this;\n        var outputCallback = function outputCallback(outputSignal) {\n            that.output(outputSignal);\n        };\n        this.videoLabelModule.outputCallback = outputCallback;\n    },\n    output: function output(outputSignal) {\n        if (!window.pageRouteModule) return;\n        if (!window.searchPageModule) return;\n        window.pageRouteModule.input("search-page");\n        window.searchPageModule.input(outputSignal);\n    },\n    open: function open() {\n        this.showVideoPage();\n    },\n    showVideoPage: function showVideoPage() {\n        if (!window.pageRouteModule) return;\n        window.pageRouteModule.input("video-page");\n    },\n    close: function close() {\n        this.videoPlayerModule.playerReload();\n        this.showHomePage();\n    },\n    showHomePage: function showHomePage() {\n        if (!window.pageRouteModule) return;\n        window.pageRouteModule.input("home-page");\n    }\n};\nwindow.videoPageModuleConstructor = videoPageModule;\n\nvar test = new videoPlayerModule(document.getElementById("video-page"));\ntest.input({\n    videoSrc: "21771892x264.mp4",\n    danmuSrc: "21771892.xml"\n});\n// setTimeout(\n//     function(){\n//         // test.controlsReset()\n//         test.input(\n//             {\n//                 videoSrc:"21771892x264.mp4",\n//                 danmuSrc:"21771892.xml"\n//             }\n//         )\n//     },2000\n// )//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY3NzL2Rhbm11X3BsYXllci5jc3M/ZTE1YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9jc3MvZGFubXVfcGxheWVyLmNzc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\n// import Vue from "vue"\n// import vueIndex from "./vue-index.vue"\n__webpack_require__(2);\n__webpack_require__(1);\n__webpack_require__(0);\n__webpack_require__(4);\n__webpack_require__(3);\n// new Vue({\n//     el:"#app",\n\n//     components:{\n//         "vue-index":vueIndex\n//     }\n// })//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWFpbi5qcz82YTRiIl0sIm5hbWVzIjpbInJlcXVpcmUiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFBQSxDQUFTLENBQVQ7QUFDQSxtQkFBQUEsQ0FBUyxDQUFUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IFZ1ZSBmcm9tIFwidnVlXCJcclxuLy8gaW1wb3J0IHZ1ZUluZGV4IGZyb20gXCIuL3Z1ZS1pbmRleC52dWVcIlxyXG5yZXF1aXJlLmNvbnRleHQoXCIuL3ZpZGVvc1wiLGZhbHNlLC9eW1xcc1xcU10rJC8pXHJcbnJlcXVpcmUuY29udGV4dChcIi4vaW1hZ2VzXCIsZmFsc2UsL15bXFxzXFxTXSskLylcclxucmVxdWlyZS5jb250ZXh0KFwiLi9kYW5tdVwiLGZhbHNlLC9eW1xcc1xcU10rJC8pXHJcbnJlcXVpcmUgKFwiLi9jc3MvZGFubXVfcGxheWVyLmNzc1wiKVxyXG5yZXF1aXJlIChcIi4vSnMvZGFubXVfcGxheWVyLmpzXCIpXHJcbi8vIG5ldyBWdWUoe1xyXG4vLyAgICAgZWw6XCIjYXBwXCIsXHJcbiAgICBcclxuLy8gICAgIGNvbXBvbmVudHM6e1xyXG4vLyAgICAgICAgIFwidnVlLWluZGV4XCI6dnVlSW5kZXhcclxuLy8gICAgIH1cclxuLy8gfSlcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "21771892.xml";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvZGFubXUvMjE3NzE4OTIueG1sPzY0ODUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjIxNzcxODkyLnhtbFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2Rhbm11LzIxNzcxODkyLnhtbFxuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "browserfullscreen_off_button.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Jyb3dzZXJmdWxsc2NyZWVuX29mZl9idXR0b24ucG5nPzg0MjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImJyb3dzZXJmdWxsc2NyZWVuX29mZl9idXR0b24ucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL2Jyb3dzZXJmdWxsc2NyZWVuX29mZl9idXR0b24ucG5nXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "browserfullscreen_on_button.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Jyb3dzZXJmdWxsc2NyZWVuX29uX2J1dHRvbi5wbmc/MmM4MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYnJvd3NlcmZ1bGxzY3JlZW5fb25fYnV0dG9uLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9icm93c2VyZnVsbHNjcmVlbl9vbl9idXR0b24ucG5nXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "controlsBarUnloaded.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2NvbnRyb2xzQmFyVW5sb2FkZWQucG5nPzYyY2IiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNvbnRyb2xzQmFyVW5sb2FkZWQucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL2NvbnRyb2xzQmFyVW5sb2FkZWQucG5nXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "controls_playbutton.jpg";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2NvbnRyb2xzX3BsYXlidXR0b24uanBnP2FjNWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjb250cm9sc19wbGF5YnV0dG9uLmpwZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9jb250cm9sc19wbGF5YnV0dG9uLmpwZ1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "controls_volumebutton.jpg";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2NvbnRyb2xzX3ZvbHVtZWJ1dHRvbi5qcGc/YzdjMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNvbnRyb2xzX3ZvbHVtZWJ1dHRvbi5qcGdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvY29udHJvbHNfdm9sdW1lYnV0dG9uLmpwZ1xuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "controls_volumebutton_offf.jpg";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2NvbnRyb2xzX3ZvbHVtZWJ1dHRvbl9vZmZmLmpwZz9iZTBlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY29udHJvbHNfdm9sdW1lYnV0dG9uX29mZmYuanBnXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL2NvbnRyb2xzX3ZvbHVtZWJ1dHRvbl9vZmZmLmpwZ1xuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_clean_fixedbottom_off.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX2ZpeGVkYm90dG9tX29mZi5wbmc/ZTU1MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImRhbm11X2NsZWFuX2ZpeGVkYm90dG9tX29mZi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvZGFubXVfY2xlYW5fZml4ZWRib3R0b21fb2ZmLnBuZ1xuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_clean_fixedbottom_off_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX2ZpeGVkYm90dG9tX29mZl9ob3Zlci5wbmc/ZDgwNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImRhbm11X2NsZWFuX2ZpeGVkYm90dG9tX29mZl9ob3Zlci5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvZGFubXVfY2xlYW5fZml4ZWRib3R0b21fb2ZmX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_clean_fixedbottom_on.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX2ZpeGVkYm90dG9tX29uLnBuZz85YWVjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGFubXVfY2xlYW5fZml4ZWRib3R0b21fb24ucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX2ZpeGVkYm90dG9tX29uLnBuZ1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_clean_fixedbottom_on_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX2ZpeGVkYm90dG9tX29uX2hvdmVyLnBuZz9mMjRlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGFubXVfY2xlYW5fZml4ZWRib3R0b21fb25faG92ZXIucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX2ZpeGVkYm90dG9tX29uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_clean_fixedtop_off.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX2ZpeGVkdG9wX29mZi5wbmc/YTM5OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImRhbm11X2NsZWFuX2ZpeGVkdG9wX29mZi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvZGFubXVfY2xlYW5fZml4ZWR0b3Bfb2ZmLnBuZ1xuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///17\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_clean_fixedtop_off_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX2ZpeGVkdG9wX29mZl9ob3Zlci5wbmc/NDQ3NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImRhbm11X2NsZWFuX2ZpeGVkdG9wX29mZl9ob3Zlci5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvZGFubXVfY2xlYW5fZml4ZWR0b3Bfb2ZmX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_clean_fixedtop_on.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX2ZpeGVkdG9wX29uLnBuZz84MzViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGFubXVfY2xlYW5fZml4ZWR0b3Bfb24ucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX2ZpeGVkdG9wX29uLnBuZ1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_clean_fixedtop_on_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX2ZpeGVkdG9wX29uX2hvdmVyLnBuZz81MWJjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGFubXVfY2xlYW5fZml4ZWR0b3Bfb25faG92ZXIucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX2ZpeGVkdG9wX29uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_clean_movepos_off.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX21vdmVwb3Nfb2ZmLnBuZz9mYTYzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGFubXVfY2xlYW5fbW92ZXBvc19vZmYucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX21vdmVwb3Nfb2ZmLnBuZ1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_clean_movepos_off_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX21vdmVwb3Nfb2ZmX2hvdmVyLnBuZz9jZmFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGFubXVfY2xlYW5fbW92ZXBvc19vZmZfaG92ZXIucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX21vdmVwb3Nfb2ZmX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_clean_movepos_on.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX21vdmVwb3Nfb24ucG5nPzQyOGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkYW5tdV9jbGVhbl9tb3ZlcG9zX29uLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9kYW5tdV9jbGVhbl9tb3ZlcG9zX29uLnBuZ1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_clean_movepos_on_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X2NsZWFuX21vdmVwb3Nfb25faG92ZXIucG5nPzJmYzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkYW5tdV9jbGVhbl9tb3ZlcG9zX29uX2hvdmVyLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9kYW5tdV9jbGVhbl9tb3ZlcG9zX29uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_off_button.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X29mZl9idXR0b24ucG5nPzM5MWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkYW5tdV9vZmZfYnV0dG9uLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9kYW5tdV9vZmZfYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_off_button_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X29mZl9idXR0b25faG92ZXIucG5nP2Y0NDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkYW5tdV9vZmZfYnV0dG9uX2hvdmVyLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9kYW5tdV9vZmZfYnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_on_button.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X29uX2J1dHRvbi5wbmc/NjU0NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImRhbm11X29uX2J1dHRvbi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvZGFubXVfb25fYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "danmu_on_button_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2Rhbm11X29uX2J1dHRvbl9ob3Zlci5wbmc/Y2I1MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImRhbm11X29uX2J1dHRvbl9ob3Zlci5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvZGFubXVfb25fYnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "home_page_logo.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2hvbWVfcGFnZV9sb2dvLnBuZz9jYzhmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaG9tZV9wYWdlX2xvZ28ucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL2hvbWVfcGFnZV9sb2dvLnBuZ1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///29\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "mutebutton.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL211dGVidXR0b24ucG5nP2E0NjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJtdXRlYnV0dG9uLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9tdXRlYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///30\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "mutebutton_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL211dGVidXR0b25faG92ZXIucG5nPzJiMjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJtdXRlYnV0dG9uX2hvdmVyLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9tdXRlYnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///31\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "pausebutton.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3BhdXNlYnV0dG9uLnBuZz9jNzAzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjMyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwicGF1c2VidXR0b24ucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3BhdXNlYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "pausebutton_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3BhdXNlYnV0dG9uX2hvdmVyLnBuZz8xMDc0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwicGF1c2VidXR0b25faG92ZXIucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3BhdXNlYnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "playbutton.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3BsYXlidXR0b24ucG5nPzkwOWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJwbGF5YnV0dG9uLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9wbGF5YnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "playbutton_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3BsYXlidXR0b25faG92ZXIucG5nP2JkNzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJwbGF5YnV0dG9uX2hvdmVyLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9wbGF5YnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///35\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "readyStateLogo.gif";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3JlYWR5U3RhdGVMb2dvLmdpZj9lMWVkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwicmVhZHlTdGF0ZUxvZ28uZ2lmXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3JlYWR5U3RhdGVMb2dvLmdpZlxuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///36\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "repeat_off_button.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3JlcGVhdF9vZmZfYnV0dG9uLnBuZz8wNDJlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjM3LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwicmVwZWF0X29mZl9idXR0b24ucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3JlcGVhdF9vZmZfYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "repeat_off_button_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3JlcGVhdF9vZmZfYnV0dG9uX2hvdmVyLnBuZz85MmI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjM4LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwicmVwZWF0X29mZl9idXR0b25faG92ZXIucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3JlcGVhdF9vZmZfYnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "repeat_on_button.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3JlcGVhdF9vbl9idXR0b24ucG5nPzdmMmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJyZXBlYXRfb25fYnV0dG9uLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9yZXBlYXRfb25fYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///39\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "repeat_on_button_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3JlcGVhdF9vbl9idXR0b25faG92ZXIucG5nPzBkNmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJyZXBlYXRfb25fYnV0dG9uX2hvdmVyLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9yZXBlYXRfb25fYnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///40\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_choose_button.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfY2hvb3NlX2J1dHRvbi5wbmc/YzZhZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNlbmRiYXJfY2hvb3NlX2J1dHRvbi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvc2VuZGJhcl9jaG9vc2VfYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///41\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_choose_button_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfY2hvb3NlX2J1dHRvbl9ob3Zlci5wbmc/ZDU3NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNlbmRiYXJfY2hvb3NlX2J1dHRvbl9ob3Zlci5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvc2VuZGJhcl9jaG9vc2VfYnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///42\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_color_button.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfY29sb3JfYnV0dG9uLnBuZz85Y2NlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjQzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic2VuZGJhcl9jb2xvcl9idXR0b24ucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3NlbmRiYXJfY29sb3JfYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///43\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_color_button_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfY29sb3JfYnV0dG9uX2hvdmVyLnBuZz9hNGUzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic2VuZGJhcl9jb2xvcl9idXR0b25faG92ZXIucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3NlbmRiYXJfY29sb3JfYnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///44\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_fixedbottom_mode_off.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfZml4ZWRib3R0b21fbW9kZV9vZmYucG5nPzNjYmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzZW5kYmFyX2ZpeGVkYm90dG9tX21vZGVfb2ZmLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9zZW5kYmFyX2ZpeGVkYm90dG9tX21vZGVfb2ZmLnBuZ1xuLy8gbW9kdWxlIGlkID0gNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///45\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_fixedbottom_mode_off_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfZml4ZWRib3R0b21fbW9kZV9vZmZfaG92ZXIucG5nPzM2OGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzZW5kYmFyX2ZpeGVkYm90dG9tX21vZGVfb2ZmX2hvdmVyLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9zZW5kYmFyX2ZpeGVkYm90dG9tX21vZGVfb2ZmX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///46\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_fixedbottom_mode_on.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfZml4ZWRib3R0b21fbW9kZV9vbi5wbmc/YjRjZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNlbmRiYXJfZml4ZWRib3R0b21fbW9kZV9vbi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvc2VuZGJhcl9maXhlZGJvdHRvbV9tb2RlX29uLnBuZ1xuLy8gbW9kdWxlIGlkID0gNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_fixedbottom_mode_on_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfZml4ZWRib3R0b21fbW9kZV9vbl9ob3Zlci5wbmc/NjE0MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNlbmRiYXJfZml4ZWRib3R0b21fbW9kZV9vbl9ob3Zlci5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvc2VuZGJhcl9maXhlZGJvdHRvbV9tb2RlX29uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///48\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_fixedtop_mode_off.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfZml4ZWR0b3BfbW9kZV9vZmYucG5nPzFkMDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzZW5kYmFyX2ZpeGVkdG9wX21vZGVfb2ZmLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9zZW5kYmFyX2ZpeGVkdG9wX21vZGVfb2ZmLnBuZ1xuLy8gbW9kdWxlIGlkID0gNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///49\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_fixedtop_mode_off_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfZml4ZWR0b3BfbW9kZV9vZmZfaG92ZXIucG5nPzQyZTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzZW5kYmFyX2ZpeGVkdG9wX21vZGVfb2ZmX2hvdmVyLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9zZW5kYmFyX2ZpeGVkdG9wX21vZGVfb2ZmX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///50\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_fixedtop_mode_on.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfZml4ZWR0b3BfbW9kZV9vbi5wbmc/Y2QxOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNlbmRiYXJfZml4ZWR0b3BfbW9kZV9vbi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvc2VuZGJhcl9maXhlZHRvcF9tb2RlX29uLnBuZ1xuLy8gbW9kdWxlIGlkID0gNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///51\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_fixedtop_mode_on_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfZml4ZWR0b3BfbW9kZV9vbl9ob3Zlci5wbmc/ZGM1YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNlbmRiYXJfZml4ZWR0b3BfbW9kZV9vbl9ob3Zlci5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvc2VuZGJhcl9maXhlZHRvcF9tb2RlX29uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///52\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_movepos_mode_off.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfbW92ZXBvc19tb2RlX29mZi5wbmc/MzZjMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1My5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNlbmRiYXJfbW92ZXBvc19tb2RlX29mZi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvc2VuZGJhcl9tb3ZlcG9zX21vZGVfb2ZmLnBuZ1xuLy8gbW9kdWxlIGlkID0gNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///53\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_movepos_mode_off_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfbW92ZXBvc19tb2RlX29mZl9ob3Zlci5wbmc/NTQ5YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNlbmRiYXJfbW92ZXBvc19tb2RlX29mZl9ob3Zlci5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvc2VuZGJhcl9tb3ZlcG9zX21vZGVfb2ZmX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///54\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_movepos_mode_on.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfbW92ZXBvc19tb2RlX29uLnBuZz81NGI0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjU1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic2VuZGJhcl9tb3ZlcG9zX21vZGVfb24ucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3NlbmRiYXJfbW92ZXBvc19tb2RlX29uLnBuZ1xuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///55\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "sendbar_movepos_mode_on_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlbmRiYXJfbW92ZXBvc19tb2RlX29uX2hvdmVyLnBuZz9kMGQ2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjU2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic2VuZGJhcl9tb3ZlcG9zX21vZGVfb25faG92ZXIucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3NlbmRiYXJfbW92ZXBvc19tb2RlX29uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///56\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "serchbackgroundimage.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3NlcmNoYmFja2dyb3VuZGltYWdlLnBuZz82MzIyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjU3LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic2VyY2hiYWNrZ3JvdW5kaW1hZ2UucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3NlcmNoYmFja2dyb3VuZGltYWdlLnBuZ1xuLy8gbW9kdWxlIGlkID0gNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///57\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "state_button.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3N0YXRlX2J1dHRvbi5wbmc/NjY0ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInN0YXRlX2J1dHRvbi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvc3RhdGVfYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///58\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "state_button0.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3N0YXRlX2J1dHRvbjAucG5nPzgxYjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzdGF0ZV9idXR0b24wLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2ltYWdlcy9zdGF0ZV9idXR0b24wLnBuZ1xuLy8gbW9kdWxlIGlkID0gNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///59\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "videoPageUnloaded.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3ZpZGVvUGFnZVVubG9hZGVkLnBuZz9mODVhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjYwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwidmlkZW9QYWdlVW5sb2FkZWQucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3ZpZGVvUGFnZVVubG9hZGVkLnBuZ1xuLy8gbW9kdWxlIGlkID0gNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///60\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "volume_div_max.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3ZvbHVtZV9kaXZfbWF4LnBuZz82ZmFlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjYxLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwidm9sdW1lX2Rpdl9tYXgucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3ZvbHVtZV9kaXZfbWF4LnBuZ1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///61\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "volume_div_min.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3ZvbHVtZV9kaXZfbWluLnBuZz80MWQxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjYyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwidm9sdW1lX2Rpdl9taW4ucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3ZvbHVtZV9kaXZfbWluLnBuZ1xuLy8gbW9kdWxlIGlkID0gNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///62\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "volume_div_off.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3ZvbHVtZV9kaXZfb2ZmLnBuZz9kZmM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjYzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwidm9sdW1lX2Rpdl9vZmYucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3ZvbHVtZV9kaXZfb2ZmLnBuZ1xuLy8gbW9kdWxlIGlkID0gNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///63\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "volumebutton.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3ZvbHVtZWJ1dHRvbi5wbmc/MjRjMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI2NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInZvbHVtZWJ1dHRvbi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvdm9sdW1lYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///64\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "volumebutton_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3ZvbHVtZWJ1dHRvbl9ob3Zlci5wbmc/ZjJlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI2NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInZvbHVtZWJ1dHRvbl9ob3Zlci5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvdm9sdW1lYnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///65\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "volumelowbutton.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3ZvbHVtZWxvd2J1dHRvbi5wbmc/ZDRkNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInZvbHVtZWxvd2J1dHRvbi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvdm9sdW1lbG93YnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///66\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "volumelowbutton_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3ZvbHVtZWxvd2J1dHRvbl9ob3Zlci5wbmc/NzU1NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI2Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInZvbHVtZWxvd2J1dHRvbl9ob3Zlci5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvdm9sdW1lbG93YnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///67\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "webfullscreen_off_button.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3dlYmZ1bGxzY3JlZW5fb2ZmX2J1dHRvbi5wbmc/OGZjZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI2OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIndlYmZ1bGxzY3JlZW5fb2ZmX2J1dHRvbi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvd2ViZnVsbHNjcmVlbl9vZmZfYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///68\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "webfullscreen_off_button_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3dlYmZ1bGxzY3JlZW5fb2ZmX2J1dHRvbl9ob3Zlci5wbmc/ZWE5NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI2OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIndlYmZ1bGxzY3JlZW5fb2ZmX2J1dHRvbl9ob3Zlci5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvd2ViZnVsbHNjcmVlbl9vZmZfYnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///69\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "webfullscreen_on_button.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3dlYmZ1bGxzY3JlZW5fb25fYnV0dG9uLnBuZz9kZjhlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjcwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwid2ViZnVsbHNjcmVlbl9vbl9idXR0b24ucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3dlYmZ1bGxzY3JlZW5fb25fYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///70\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "widescreen_off_button.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3dpZGVzY3JlZW5fb2ZmX2J1dHRvbi5wbmc/ZTg4NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI3MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIndpZGVzY3JlZW5fb2ZmX2J1dHRvbi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvd2lkZXNjcmVlbl9vZmZfYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gNzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///71\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "widescreen_off_button_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3dpZGVzY3JlZW5fb2ZmX2J1dHRvbl9ob3Zlci5wbmc/NDY5NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI3Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIndpZGVzY3JlZW5fb2ZmX2J1dHRvbl9ob3Zlci5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9pbWFnZXMvd2lkZXNjcmVlbl9vZmZfYnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///72\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "widescreen_on_button.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3dpZGVzY3JlZW5fb25fYnV0dG9uLnBuZz9kOGQ2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjczLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwid2lkZXNjcmVlbl9vbl9idXR0b24ucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3dpZGVzY3JlZW5fb25fYnV0dG9uLnBuZ1xuLy8gbW9kdWxlIGlkID0gNzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///73\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "widescreen_on_button_hover.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL3dpZGVzY3JlZW5fb25fYnV0dG9uX2hvdmVyLnBuZz85ZDQ5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ijc0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwid2lkZXNjcmVlbl9vbl9idXR0b25faG92ZXIucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL3dpZGVzY3JlZW5fb25fYnV0dG9uX2hvdmVyLnBuZ1xuLy8gbW9kdWxlIGlkID0gNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///74\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "21771892x264.mp4";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvdmlkZW9zLzIxNzcxODkyeDI2NC5tcDQ/MWEzYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI3NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjIxNzcxODkyeDI2NC5tcDRcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC92aWRlb3MvMjE3NzE4OTJ4MjY0Lm1wNFxuLy8gbW9kdWxlIGlkID0gNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///75\n')}]);